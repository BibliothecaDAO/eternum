name: üöÄ Deploy Eternum on Slot

# Configuration Variables - Update these as needed
env:
  BRANCH: "blitz"
  SLOT_NAME: "eternum-blitz-slot-1"
  SLOT_TEAM: "realms-eternum"
  SLOT_AUTH: ${{ secrets.SLOT_AUTH }}
  SLOT_TIER: "pro"
  TORII_VERSION: "v1.7.0-alpha.5"
  TORII_CONFIG: "torii-slot.toml"
  NODE_VERSION: "18"
  CI: "true"

on:
  # schedule:
  workflow_dispatch:
    inputs:
      slot_name:
        description: 'Slot deployment name'
        required: false
        default: 'eternum-blitz-slot-1'
      torii_version:
        description: 'Torii version to deploy'
        required: false
        default: 'v1.7.0-alpha.5'

jobs:
  deploy-slot:
    name: üéØ Deploy New Game on Slot
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: üç≥ Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: üîß Setup Scarb
        uses: software-mansion/setup-scarb@v1
        with:
          scarb-version: "dev-2025-09-05"

      - name: üì• Download Dojo Release
        run: |
          curl -L -o dojo-linux-x86_64.tar.gz https://github.com/dojoengine/dojo/releases/download/v1.7.0-alpha.2/dojo_v1.7.0-alpha.2_linux_amd64.tar.gz
          tar -xzf dojo-linux-x86_64.tar.gz
          sudo mv sozo /usr/local/bin/

      - name: üé∞ Install Slot CLI
        run: |
          echo "üé∞ Installing Slot CLI..."
          
          # Install slotup (slot version manager)
          curl -L https://slot.cartridge.sh | bash
          
          # Run slotup to install slot
          echo "üöÄ Running slotup to install slot..."
          /home/runner/.config/.slot/bin/slotup
          
          # Add to PATH for subsequent steps
          echo "/home/runner/.config/.slot/bin" >> $GITHUB_PATH
          export PATH="/home/runner/.config/.slot/bin:$PATH"
          
          # Verify slot command works
          slot --version
          echo "‚úÖ Slot CLI installed successfully"

      - name: üìö Install Dependencies
        run: pnpm install

      - name: ‚è∞ Calculate Game Start Time
        id: game-timing
        run: |
          # Calculate game start time: round down to current hour, then add 2 hours 30 minutes (Unix timestamp)
          CURRENT_HOUR_START=$(date -d "$(date '+%Y-%m-%d %H:00:00')" +%s)
          GAME_START_TIMESTAMP=$((CURRENT_HOUR_START + 9000))
          
          # Create Discord timestamp format for automatic timezone conversion
          DISCORD_TIMESTAMP="<t:$GAME_START_TIMESTAMP:F>"
          GAME_START_READABLE=$(date -d "@$GAME_START_TIMESTAMP" -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Calculate next deployment time (5 hours from now)
          CURRENT_TIMESTAMP=$(date +%s)
          NEXT_DEPLOYMENT_TIMESTAMP=$((CURRENT_TIMESTAMP + 18000))
          NEXT_DEPLOYMENT_DISCORD_TIMESTAMP="<t:$NEXT_DEPLOYMENT_TIMESTAMP:R>"
          
          echo "üïê Game start time set to: $GAME_START_READABLE"
          echo "üïê Discord timestamp: $DISCORD_TIMESTAMP"
          echo "üïê Next deployment timestamp: $NEXT_DEPLOYMENT_DISCORD_TIMESTAMP"
          echo "üïê Unix timestamp: $GAME_START_TIMESTAMP"
          
          echo "timestamp=$GAME_START_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "readable=$GAME_START_READABLE" >> $GITHUB_OUTPUT
          echo "discord_timestamp=$DISCORD_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "next_deployment_timestamp=$NEXT_DEPLOYMENT_DISCORD_TIMESTAMP" >> $GITHUB_OUTPUT

      - name: üé≤ Generate New Seed
        id: generate-seed
        working-directory: ./contracts/game
        run: |
          # Generate a new random seed with timestamp
          NEW_SEED="s1_eternum_slot_$(date +%s)"
          echo "new_seed=$NEW_SEED" >> $GITHUB_OUTPUT
          echo "üé≤ Generated new seed: $NEW_SEED"

      - name: üîÑ Update Seed in dojo_slot.toml
        working-directory: ./contracts/game
        run: |
          # Update the seed in dojo_slot.toml
          sed -i 's/^seed = ".*"/seed = "${{ steps.generate-seed.outputs.new_seed }}"/' dojo_slot.toml
          echo "‚úÖ Updated seed in dojo_slot.toml"
          
          # Verify the change
          grep "^seed = " dojo_slot.toml

      - name: ‚öôÔ∏è Run Game Build
        working-directory: ./contracts
        run: |
          echo "üîß Running Game Build..."
          pnpm run game:migrate:slot:buildonly

      - name: üèóÔ∏è Run Game Migration
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 10
          retry_on: error
          on_retry_command: echo "Retrying game migration due to network error (possibly 504 Gateway Timeout)..."
          command: |
            cd contracts
            echo "üöÄ Starting game migration for slot..."
            pnpm run game:migrate:slot:migrateonly

      - name: ‚öôÔ∏è Deploy Configuration
        working-directory: ./contracts
        run: |
          CONFIG_START_MAIN_AT="${{ steps.game-timing.outputs.timestamp }}"
          export CONFIG_START_MAIN_AT

          echo "üîß Deploying slot configuration..."
          echo "üïê Game will start at: ${{ steps.game-timing.outputs.readable }}"
          pnpm run config:deploy:slot

      - name: üåç Update Torii Configuration
        working-directory: ./contracts
        run: |
          echo "üìç Updating Torii configuration with contract addresses and world address..."
          pnpm run toml:update:slot

      - name: üóëÔ∏è Delete Existing Torii Slot
        continue-on-error: true
        run: |
          SLOT_NAME="${{ github.event.inputs.slot_name || env.SLOT_NAME }}"
          echo "üóëÔ∏è Attempting to delete existing slot: $SLOT_NAME"
          slot d delete $SLOT_NAME torii -f || echo "‚ö†Ô∏è Slot deletion failed or slot doesn't exist"

      - name: üÜï Create New Torii Slot
        run: |
          SLOT_NAME="${{ github.event.inputs.slot_name || env.SLOT_NAME }}"
          TORII_VERSION="${{ github.event.inputs.torii_version || env.TORII_VERSION }}"
          
          echo "üÜï Creating new Torii slot with configuration:"
          echo "  Slot Name: $SLOT_NAME"
          echo "  Team: ${{ env.SLOT_TEAM }}"
          echo "  Tier: ${{ env.SLOT_TIER }}"
          echo "  Version: $TORII_VERSION"
          echo "  Config: ${{ env.TORII_CONFIG }}"
          
          cd contracts/game && slot d create -f \
            --team ${{ env.SLOT_TEAM }} \
            --tier ${{ env.SLOT_TIER }} \
            $SLOT_NAME torii \
            --version $TORII_VERSION \
            --config ${{ env.TORII_CONFIG }}

      - name: üíæ Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add config contracts
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üöÄ: New Blitz Deployment on Slot using ${{ env.BRANCH }} branch"
            git push
          fi

      - name: üìä Deployment Summary
        run: |
          echo "## üéâ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Seed** | ‚úÖ Updated | \`${{ steps.generate-seed.outputs.new_seed }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Game Migration** | ‚úÖ Completed | Slot profile |" >> $GITHUB_STEP_SUMMARY
          echo "| **Configuration** | ‚úÖ Deployed | Slot environment |" >> $GITHUB_STEP_SUMMARY
          echo "| **Game Start Time** | üïê Scheduled | ${{ steps.game-timing.outputs.readable }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Torii Slot** | ‚úÖ Created | \`${{ github.event.inputs.slot_name || env.SLOT_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | üì¶ ${{ github.event.inputs.torii_version || env.TORII_VERSION }} | Latest deployment |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      # Discord Success Notification
      - name: üì¢ Discord Success Notification
        if: success()
        run: |
          # Calculate registration start time (10 minutes from now)
          CURRENT_TIMESTAMP=$(date +%s)
          REGISTRATION_START_TIMESTAMP=$((CURRENT_TIMESTAMP + 600))
          REGISTRATION_DISCORD_TIMESTAMP="<t:$REGISTRATION_START_TIMESTAMP:R>"

          curl -X POST "${{ secrets.DISCORD_BLITZ_DEPLOY_SUCCESS_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "Babe wake up! New Blitz game just dropped! üöÄ",
                "description": "New game has been deployed",
                "color": 65280,
                "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'",
                "fields": [
                  {
                    "name": "üïê Game Starts",
                    "value": "${{ steps.game-timing.outputs.discord_timestamp }}",
                    "inline": false
                  },
                  {
                    "name": "‚ö° Registration Starts",
                    "value": "'"$REGISTRATION_DISCORD_TIMESTAMP"'",
                    "inline": true
                  },
                  {
                    "name": "‚ö° Next Deployment",
                    "value": "${{ steps.game-timing.outputs.next_deployment_timestamp }}",
                    "inline": true
                  }
                ],
                "footer": {
                  "text": "Eternum Blitz Auto-Deploy Bot"
                },
                "thumbnail": {
                  "url": "https://eternum.realms.world/images/buildings/construction/farm.png"
                }
              }]
            }'

      # Discord Failure Notification
      - name: üö® Discord Failure Notification
        if: failure()
        run: |
          curl -X POST "${{ secrets.DISCORD_BLITZ_DEPLOY_FAILURE_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "‚ùå Eternum Blitz Deployment Failed!",
                "description": "The deployment encountered an error and needs attention.",
                "color": 16711680,
                "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'",
                "fields": [
                  {
                    "name": "üåø Branch",
                    "value": "`${{ env.BRANCH }}`",
                    "inline": true
                  },
                  {
                    "name": "üè∑Ô∏è Slot Name",
                    "value": "`${{ github.event.inputs.slot_name || env.SLOT_NAME }}`",
                    "inline": true
                  },
                  {
                    "name": "üîó Workflow Run",
                    "value": "[View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                    "inline": false
                  }
                ],
                "footer": {
                  "text": "Eternum Auto-Deploy Bot"
                }
              }]
            }'

      - name: üö® Notify on Failure
        if: failure()
        run: |
          echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The slot deployment encountered an error. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY