name: Test Notifications

# Configuration Variables - Update these as needed
env:
  BRANCH: "blitz"
  SLOT_NAME: "eternum-blitz-slot-1"
  SLOT_TEAM: "realms-eternum"
  SLOT_AUTH: ${{ secrets.SLOT_AUTH }}
  SLOT_TIER: "pro"
  TORII_VERSION: "v1.6.0-alpha.2"
  TORII_CONFIG: "torii-slot.toml"
  NODE_VERSION: "18"
  CI: "true"

on:
  workflow_dispatch:
    inputs:
      slot_name:
        description: 'Slot deployment name'
        required: false
        default: 'eternum-blitz-slot-1'
      torii_version:
        description: 'Torii version to deploy'
        required: false
        default: 'v1.6.0-alpha.2'


jobs:
  deploy-slot:
    name: üéØ Deploy New Game on Slot
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 0

      - name: ‚è∞ Calculate Game Start Time
        id: game-timing
        run: |
          # Calculate game start time: round down to current hour, then add 2 hours 30 minutes (Unix timestamp)
          CURRENT_HOUR_START=$(date -d "$(date '+%Y-%m-%d %H:00:00')" +%s)
          GAME_START_TIMESTAMP=$((CURRENT_HOUR_START + 9000))
          
          # Create Discord timestamp format for automatic timezone conversion
          DISCORD_TIMESTAMP="<t:$GAME_START_TIMESTAMP:F>"
          GAME_START_READABLE=$(date -d "@$GAME_START_TIMESTAMP" -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Calculate registration start time (10 minutes from now)
          CURRENT_TIMESTAMP=$(date +%s)
          REGISTRATION_START_TIMESTAMP=$((CURRENT_TIMESTAMP + 600))
          REGISTRATION_DISCORD_TIMESTAMP="<t:$REGISTRATION_START_TIMESTAMP:R>"
          
          echo "üïê Game start time set to: $GAME_START_READABLE"
          echo "üïê Discord timestamp: $DISCORD_TIMESTAMP"
          echo "üïê Registration timestamp: $REGISTRATION_DISCORD_TIMESTAMP"
          echo "üïê Unix timestamp: $GAME_START_TIMESTAMP"
          
          echo "timestamp=$GAME_START_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "readable=$GAME_START_READABLE" >> $GITHUB_OUTPUT
          echo "discord_timestamp=$DISCORD_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "registration_timestamp=$REGISTRATION_DISCORD_TIMESTAMP" >> $GITHUB_OUTPUT

      # Discord Success Notification
      - name: üì¢ Discord Success Notification
        if: success()
        run: |
          curl -X POST "${{ secrets.DISCORD_BLITZ_DEPLOY_SUCCESS_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üöÄ New Game! [Test]",
                "description": "New game has been deployed",
                "color": 65280,
                "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'",
                "fields": [
                  {
                    "name": "üïê Game Start Time",
                    "value": "${{ steps.game-timing.outputs.discord_timestamp }}",
                    "inline": false
                  },
                  {
                    "name": "‚ö° Registration Starts",
                    "value": "${{ steps.game-timing.outputs.registration_timestamp }}",
                    "inline": true
                  },
                  {
                    "name": "‚ö° Next Deployment",
                    "value": "In 6 hours",
                    "inline": true
                  }
                ],
                "footer": {
                  "text": "Eternum Auto-Deploy Bot"
                },
                "thumbnail": {
                  "url": "https://eternum.realms.world/images/buildings/construction/farm.png"
                }
              }]
            }'

      # Discord Failure Notification
      - name: üö® Discord Failure Notification
        if: failure()
        run: |
          curl -X POST "${{ secrets.DISCORD_BLITZ_DEPLOY_FAILURE_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "‚ùå Eternum Blitz Deployment Failed!",
                "description": "The deployment encountered an error and needs attention.",
                "color": 16711680,
                "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'",
                "fields": [
                  {
                    "name": "üåø Branch",
                    "value": "`${{ env.BRANCH }}`",
                    "inline": true
                  },
                  {
                    "name": "üè∑Ô∏è Slot Name",
                    "value": "`${{ github.event.inputs.slot_name || env.SLOT_NAME }}`",
                    "inline": true
                  },
                  {
                    "name": "üîó Workflow Run",
                    "value": "[View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                    "inline": false
                  }
                ],
                "footer": {
                  "text": "Eternum Auto-Deploy Bot"
                }
              }]
            }'

      - name: üö® Notify on Failure
        if: failure()
        run: |
          echo "## ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The slot deployment encountered an error. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY 