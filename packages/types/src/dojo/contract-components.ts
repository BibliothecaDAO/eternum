/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, type World } from "@dojoengine/recs";

export type ContractComponents = ReturnType<typeof defineContractComponents>;

export function defineContractComponents(world: World) {
  return {
    AddressName: (() => {
      return defineComponent(
        world,
        { address: RecsType.BigInt, name: RecsType.BigInt },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "AddressName",
            types: ["felt252", "felt252"],
            customTypes: [],
          },
        },
      );
    })(),
    Building: (() => {
      return defineComponent(
        world,
        {
          outer_col: RecsType.Number,
          outer_row: RecsType.Number,
          inner_col: RecsType.Number,
          inner_row: RecsType.Number,
          category: RecsType.Number,
          bonus_percent: RecsType.Number,
          entity_id: RecsType.Number,
          outer_entity_id: RecsType.Number,
          paused: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Building",
            types: ["u32", "u32", "u32", "u32", "u8", "u8", "u32", "u32", "bool"],
            customTypes: ["BuildingCategory"],
          },
        },
      );
    })(),
    BuildingCategoryConfig: (() => {
      return defineComponent(
        world,
        {
          category: RecsType.Number,
          complex_erection_cost_id: RecsType.Number,
          complex_erection_cost_count: RecsType.Number,
          simple_erection_cost_id: RecsType.Number,
          simple_erection_cost_count: RecsType.Number,
          population_cost: RecsType.Number,
          capacity_grant: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "BuildingCategoryConfig",
            types: ["u8", "u32", "u8", "u32", "u8", "u8", "u8"],
            customTypes: [],
          },
        },
      );
    })(),

    Guild: (() => {
      return defineComponent(
        world,
        {
          guild_id: RecsType.BigInt,
          public: RecsType.Boolean,
          name: RecsType.BigInt,
          member_count: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Guild",
            types: ["ContractAddress", "bool", "felt252", "u16"],
            customTypes: [],
          },
        },
      );
    })(),
    GuildMember: (() => {
      return defineComponent(
        world,
        { member: RecsType.BigInt, guild_id: RecsType.BigInt },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "GuildMember",
            types: ["ContractAddress", "ContractAddress"],
            customTypes: [],
          },
        },
      );
    })(),
    GuildWhitelist: (() => {
      return defineComponent(
        world,
        { guild_id: RecsType.BigInt, address: RecsType.BigInt, whitelisted: RecsType.Boolean },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "GuildWhitelist",
            types: ["ContractAddress", "ContractAddress", "bool"],
            customTypes: [],
          },
        },
      );
    })(),
    Hyperstructure: (() => {
      return defineComponent(
        world,
        {
          hyperstructure_id: RecsType.Number,
          initialized: RecsType.Boolean,
          completed: RecsType.Boolean,
          access: RecsType.String,
          randomness: RecsType.BigInt,
          points_multiplier: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Hyperstructure",
            types: ["u32", "bool", "bool", "enum", "felt252", "u8"],
            customTypes: ["ConstructionAccess"],
          },
        },
      );
    })(),
    HyperstructureGlobals: (() => {
      return defineComponent(
        world,
        {
          world_id: RecsType.Number,
          created_count: RecsType.Number,
          completed_count: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "HyperstructureGlobals",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    HyperstructureRequirements: (() => {
      return defineComponent(
        world,
        {
          hyperstructure_id: RecsType.Number,
          stone_amount_current: RecsType.BigInt,
          coal_amount_current: RecsType.BigInt,
          wood_amount_current: RecsType.BigInt,
          copper_amount_current: RecsType.BigInt,
          ironwood_amount_current: RecsType.BigInt,
          obsidian_amount_current: RecsType.BigInt,
          gold_amount_current: RecsType.BigInt,
          silver_amount_current: RecsType.BigInt,
          mithral_amount_current: RecsType.BigInt,
          alchemicsilver_amount_current: RecsType.BigInt,
          coldiron_amount_current: RecsType.BigInt,
          deepcrystal_amount_current: RecsType.BigInt,
          ruby_amount_current: RecsType.BigInt,
          diamonds_amount_current: RecsType.BigInt,
          hartwood_amount_current: RecsType.BigInt,
          ignium_amount_current: RecsType.BigInt,
          twilightquartz_amount_current: RecsType.BigInt,
          trueice_amount_current: RecsType.BigInt,
          adamantine_amount_current: RecsType.BigInt,
          sapphire_amount_current: RecsType.BigInt,
          etherealsilica_amount_current: RecsType.BigInt,
          dragonhide_amount_current: RecsType.BigInt,
          labor_amount_current: RecsType.BigInt,
          current_resource_total: RecsType.BigInt,
          needed_resource_total: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "HyperstructureRequirements",
            types: [
              "u32",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
              "u128",
            ],
            customTypes: [],
          },
        },
      );
    })(),
    HyperstructureConstructConfig: (() => {
      return defineComponent(
        world,
        {
          resource_type: RecsType.Number,
          resource_contribution_points: RecsType.BigInt,
          min_amount: RecsType.Number,
          max_amount: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "HyperstructureConstructConfig",
            types: ["u8", "u64", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    HyperstructureShareholders: (() => {
      return defineComponent(
        world,
        {
          hyperstructure_id: RecsType.Number,
          start_at: RecsType.Number,
          shareholders: RecsType.NumberArray,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "HyperstructureShareholders",
            types: ["u32", "u64", "Span<(u32, u16)>"],
            customTypes: [],
          },
        },
      );
    })(),

    PlayerRegisteredPoints: (() => {
      return defineComponent(
        world,
        {
          address: RecsType.BigInt,
          registered_points: RecsType.BigInt,
          prize_claimed: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "PlayerRegisteredPoints",
            types: ["ContractAddress", "u128", "bool"],
            customTypes: [],
          },
        },
      );
    })(),

    SeasonPrize: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          total_registered_points: RecsType.BigInt,
          total_lords_pool: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "SeasonPrize",
            types: ["u32", "u128", "u256"],
            customTypes: [],
          },
        },
      );
    })(),

    Liquidity: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          resource_type: RecsType.Number,
          shares: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Liquidity",
            types: ["ContractAddress", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),

    Market: (() => {
      return defineComponent(
        world,
        {
          resource_type: RecsType.Number,
          lords_amount: RecsType.BigInt,
          resource_amount: RecsType.BigInt,
          total_shares: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Market",
            types: ["u8", "u128", "u128", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    Message: (() => {
      return defineComponent(
        world,
        {
          identity: RecsType.BigInt,
          channel: RecsType.BigInt,
          salt: RecsType.BigInt,
          content: RecsType.String,
          timestamp: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Message",
            types: ["felt252", "felt252", "felt252", "BytesArray", "u64"],
            customTypes: [],
          },
        },
      );
    })(),

    StructureBuildings: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          packed_counts_1: RecsType.BigInt,
          packed_counts_2: RecsType.BigInt,
          packed_counts_3: RecsType.BigInt,
          population: {
            current: RecsType.Number,
            max: RecsType.Number,
          },
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "StructureBuildings",
            types: ["u32", "u128", "u128", "u128", "u32", "u32"],
            customTypes: ["Population"],
          },
        },
      );
    })(),
    StructureVillageSlots: (() => {
      return defineComponent(
        world,
        {
          connected_realm_entity_id: RecsType.Number,
          connected_realm_id: RecsType.Number,
          connected_realm_coord: {
            x: RecsType.Number,
            y: RecsType.Number,
          },
          directions_left: RecsType.NumberArray,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "StructureVillageSlots",
            types: ["u32", "u16", "Span<u8>", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    ResourceFactoryConfig: (() => {
      return defineComponent(
        world,
        {
          resource_type: RecsType.Number,
          realm_output_per_second: RecsType.BigInt,
          village_output_per_second: RecsType.BigInt,
          labor_output_per_resource: RecsType.BigInt,
          output_per_simple_input: RecsType.BigInt,
          output_per_complex_input: RecsType.BigInt,
          simple_input_list_id: RecsType.Number,
          complex_input_list_id: RecsType.Number,
          simple_input_list_count: RecsType.Number,
          complex_input_list_count: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "ResourceFactoryConfig",
            types: ["u8", "u64", "u64", "u64", "u64", "u64", "u32", "u32", "u8", "u8"],
            customTypes: [],
          },
        },
      );
    })(),

    Quantity: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, value: RecsType.BigInt },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Quantity",
            types: ["u32", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    QuantityTracker: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, count: RecsType.BigInt },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "QuantityTracker",
            types: ["felt252", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    Quest: (() => {
      return defineComponent(
        world,
        {
          game_token_id: RecsType.BigInt,
          game_address: RecsType.String,
          quest_tile_id: RecsType.Number,
          explorer_id: RecsType.Number,
          completed: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Quest",
            types: ["u64", "ContractAddress", "u32", "u32", "bool"],
            customTypes: [],
          },
        },
      );
    })(),
    QuestLevels: (() => {
      return defineComponent(
        world,
        {
          game_address: RecsType.String,
          levels: RecsType.Schema,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "QuestLevels",
            types: ["ContractAddress", "Span<Level>"],
            customTypes: ["Level"],
          },
        },
      );
    })(),
    QuestTile: (() => {
      return defineComponent(
        world,
        {
          id: RecsType.Number,
          game_address: RecsType.String,
          coord: {
            x: RecsType.Number,
            y: RecsType.Number,
          },
          level: RecsType.Number,
          resource_type: RecsType.Number,
          amount: RecsType.BigInt,
          capacity: RecsType.Number,
          participant_count: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "QuestTile",
            types: ["u32", "ContractAddress", "u32", "u32", "u8", "u8", "u128", "u16", "u16"],
            customTypes: ["Coord"],
          },
        },
      );
    })(),
    StructureLevelConfig: (() => {
      return defineComponent(
        world,
        { level: RecsType.Number, required_resources_id: RecsType.Number, required_resource_count: RecsType.Number },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "StructureLevelConfig",
            types: ["u8", "u32", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    ProductionBoostBonus: (() => {
      return defineComponent(
        world,
        {
          structure_id: RecsType.Number,
          wonder_incr_percent_num: RecsType.Number,
          incr_resource_rate_percent_num: RecsType.Number,
          incr_labor_rate_percent_num: RecsType.Number,
          incr_troop_rate_percent_num: RecsType.Number,
          incr_resource_rate_end_tick: RecsType.Number,
          incr_labor_rate_end_tick: RecsType.Number,
          incr_troop_rate_end_tick: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "ProductionBoostBonus",
            types: ["u32", "u16", "u16", "u16", "u16", "u32", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    Resource: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          STONE_BALANCE: RecsType.BigInt,
          COAL_BALANCE: RecsType.BigInt,
          WOOD_BALANCE: RecsType.BigInt,
          COPPER_BALANCE: RecsType.BigInt,
          IRONWOOD_BALANCE: RecsType.BigInt,
          OBSIDIAN_BALANCE: RecsType.BigInt,
          GOLD_BALANCE: RecsType.BigInt,
          SILVER_BALANCE: RecsType.BigInt,
          MITHRAL_BALANCE: RecsType.BigInt,
          ALCHEMICAL_SILVER_BALANCE: RecsType.BigInt,
          COLD_IRON_BALANCE: RecsType.BigInt,
          DEEP_CRYSTAL_BALANCE: RecsType.BigInt,
          RUBY_BALANCE: RecsType.BigInt,
          DIAMONDS_BALANCE: RecsType.BigInt,
          HARTWOOD_BALANCE: RecsType.BigInt,
          IGNIUM_BALANCE: RecsType.BigInt,
          TWILIGHT_QUARTZ_BALANCE: RecsType.BigInt,
          TRUE_ICE_BALANCE: RecsType.BigInt,
          ADAMANTINE_BALANCE: RecsType.BigInt,
          SAPPHIRE_BALANCE: RecsType.BigInt,
          ETHEREAL_SILICA_BALANCE: RecsType.BigInt,
          DRAGONHIDE_BALANCE: RecsType.BigInt,
          LABOR_BALANCE: RecsType.BigInt,
          EARTHEN_SHARD_BALANCE: RecsType.BigInt,
          DONKEY_BALANCE: RecsType.BigInt,
          KNIGHT_T1_BALANCE: RecsType.BigInt,
          KNIGHT_T2_BALANCE: RecsType.BigInt,
          KNIGHT_T3_BALANCE: RecsType.BigInt,
          CROSSBOWMAN_T1_BALANCE: RecsType.BigInt,
          CROSSBOWMAN_T2_BALANCE: RecsType.BigInt,
          CROSSBOWMAN_T3_BALANCE: RecsType.BigInt,
          PALADIN_T1_BALANCE: RecsType.BigInt,
          PALADIN_T2_BALANCE: RecsType.BigInt,
          PALADIN_T3_BALANCE: RecsType.BigInt,
          WHEAT_BALANCE: RecsType.BigInt,
          FISH_BALANCE: RecsType.BigInt,
          LORDS_BALANCE: RecsType.BigInt,
          ESSENCE_BALANCE: RecsType.BigInt,
          RELIC_E1_BALANCE: RecsType.BigInt,
          RELIC_E2_BALANCE: RecsType.BigInt,
          RELIC_E3_BALANCE: RecsType.BigInt,
          RELIC_E4_BALANCE: RecsType.BigInt,
          RELIC_E5_BALANCE: RecsType.BigInt,
          RELIC_E6_BALANCE: RecsType.BigInt,
          RELIC_E7_BALANCE: RecsType.BigInt,
          RELIC_E8_BALANCE: RecsType.BigInt,
          RELIC_E9_BALANCE: RecsType.BigInt,
          RELIC_E10_BALANCE: RecsType.BigInt,
          RELIC_E11_BALANCE: RecsType.BigInt,
          RELIC_E12_BALANCE: RecsType.BigInt,
          RELIC_E13_BALANCE: RecsType.BigInt,
          RELIC_E14_BALANCE: RecsType.BigInt,
          RELIC_E15_BALANCE: RecsType.BigInt,
          RELIC_E16_BALANCE: RecsType.BigInt,
          RELIC_E17_BALANCE: RecsType.BigInt,
          RELIC_E18_BALANCE: RecsType.BigInt,
          weight: {
            capacity: RecsType.BigInt,
            weight: RecsType.BigInt,
          },
          STONE_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          COAL_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          WOOD_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          COPPER_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          IRONWOOD_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          OBSIDIAN_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          GOLD_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          SILVER_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          MITHRAL_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          ALCHEMICAL_SILVER_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          COLD_IRON_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          DEEP_CRYSTAL_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          RUBY_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          DIAMONDS_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          HARTWOOD_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          IGNIUM_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          TWILIGHT_QUARTZ_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          TRUE_ICE_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          ADAMANTINE_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          SAPPHIRE_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          ETHEREAL_SILICA_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          DRAGONHIDE_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          LABOR_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          EARTHEN_SHARD_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          DONKEY_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          KNIGHT_T1_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          KNIGHT_T2_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          KNIGHT_T3_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          CROSSBOWMAN_T1_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          CROSSBOWMAN_T2_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          CROSSBOWMAN_T3_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          PALADIN_T1_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          PALADIN_T2_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          PALADIN_T3_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          WHEAT_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          FISH_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          LORDS_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
          ESSENCE_PRODUCTION: {
            building_count: RecsType.Number,
            production_rate: RecsType.BigInt,
            output_amount_left: RecsType.BigInt,
            last_updated_at: RecsType.Number,
          },
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Resource",
            types: [
              "u32", // entity_id
              ...Array(56).fill("u128"), // balances
              "u128",
              "u128", // weight
              ...Array(38).fill(["u32", "u128", "u128", "u32"]).flat(), // productions
            ],
            customTypes: ["Weight", "Production"],
          },
        },
      );
    })(),
    ResourceAllowance: (() => {
      return defineComponent(
        world,
        {
          owner_entity_id: RecsType.Number,
          approved_entity_id: RecsType.Number,
          resource_type: RecsType.Number,
          amount: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "ResourceAllowance",
            types: ["u32", "u32", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    ResourceArrival: (() => {
      return defineComponent(
        world,
        {
          structure_id: RecsType.Number,
          day: RecsType.BigInt,
          slot_1: RecsType.StringArray,
          slot_2: RecsType.StringArray,
          slot_3: RecsType.StringArray,
          slot_4: RecsType.StringArray,
          slot_5: RecsType.StringArray,
          slot_6: RecsType.StringArray,
          slot_7: RecsType.StringArray,
          slot_8: RecsType.StringArray,
          slot_9: RecsType.StringArray,
          slot_10: RecsType.StringArray,
          slot_11: RecsType.StringArray,
          slot_12: RecsType.StringArray,
          slot_13: RecsType.StringArray,
          slot_14: RecsType.StringArray,
          slot_15: RecsType.StringArray,
          slot_16: RecsType.StringArray,
          slot_17: RecsType.StringArray,
          slot_18: RecsType.StringArray,
          slot_19: RecsType.StringArray,
          slot_20: RecsType.StringArray,
          slot_21: RecsType.StringArray,
          slot_22: RecsType.StringArray,
          slot_23: RecsType.StringArray,
          slot_24: RecsType.StringArray,
          slot_25: RecsType.StringArray,
          slot_26: RecsType.StringArray,
          slot_27: RecsType.StringArray,
          slot_28: RecsType.StringArray,
          slot_29: RecsType.StringArray,
          slot_30: RecsType.StringArray,
          slot_31: RecsType.StringArray,
          slot_32: RecsType.StringArray,
          slot_33: RecsType.StringArray,
          slot_34: RecsType.StringArray,
          slot_35: RecsType.StringArray,
          slot_36: RecsType.StringArray,
          slot_37: RecsType.StringArray,
          slot_38: RecsType.StringArray,
          slot_39: RecsType.StringArray,
          slot_40: RecsType.StringArray,
          slot_41: RecsType.StringArray,
          slot_42: RecsType.StringArray,
          slot_43: RecsType.StringArray,
          slot_44: RecsType.StringArray,
          slot_45: RecsType.StringArray,
          slot_46: RecsType.StringArray,
          slot_47: RecsType.StringArray,
          slot_48: RecsType.StringArray,
          initialized: RecsType.Boolean,
          // just used to track if any resources are in the arrival
          total_amount: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "ResourceArrival",
            types: [
              "u32",
              "u64",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "array",
              "bool",
              "u128",
            ],
            customTypes: [],
          },
        },
      );
    })(),
    ResourceBridgeWhitelistConfig: (() => {
      return defineComponent(
        world,
        {
          token: RecsType.BigInt,
          resource_type: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "ResourceBridgeWhitelistConfig",
            types: ["ContractAddress", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    ResourceList: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, index: RecsType.Number, resource_type: RecsType.Number, amount: RecsType.BigInt },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "ResourceList",
            types: ["u32", "u32", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    ExplorerTroops: (() => {
      return defineComponent(
        world,
        {
          explorer_id: RecsType.Number,
          owner: RecsType.Number,
          troops: {
            category: RecsType.String,
            tier: RecsType.String,
            count: RecsType.BigInt,
            stamina: {
              amount: RecsType.BigInt,
              updated_tick: RecsType.BigInt,
            },
            boosts: {
              incr_damage_dealt_percent_num: RecsType.Number,
              incr_damage_dealt_end_tick: RecsType.Number,
              decr_damage_gotten_percent_num: RecsType.Number,
              decr_damage_gotten_end_tick: RecsType.Number,
              incr_stamina_regen_percent_num: RecsType.Number,
              incr_stamina_regen_tick_count: RecsType.Number,
              incr_explore_reward_percent_num: RecsType.Number,
              incr_explore_reward_end_tick: RecsType.Number,
            },
          },
          coord: {
            x: RecsType.Number,
            y: RecsType.Number,
          },
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "ExplorerTroops",
            types: [
              "u32",
              "u32",
              "enum",
              "enum",
              "u128",
              "u128",
              "u128",
              "u16",
              "u32",
              "u16",
              "u32",
              "u16",
              "u8",
              "u16",
              "u32",
              "u32",
              "u32",
            ],
            customTypes: ["Troops", "Coord"],
          },
        },
      );
    })(),

    Structure: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          owner: RecsType.BigInt,
          base: {
            troop_guard_count: RecsType.Number,
            troop_explorer_count: RecsType.Number,
            troop_max_guard_count: RecsType.Number,
            troop_max_explorer_count: RecsType.Number,
            created_at: RecsType.Number,
            category: RecsType.Number,
            coord_x: RecsType.Number,
            coord_y: RecsType.Number,
            level: RecsType.Number,
          },
          troop_guards: {
            delta: {
              category: RecsType.String,
              tier: RecsType.String,
              count: RecsType.BigInt,
              stamina: {
                amount: RecsType.BigInt,
                updated_tick: RecsType.BigInt,
              },
              boosts: {
                incr_damage_dealt_percent_num: RecsType.Number,
                incr_damage_dealt_end_tick: RecsType.Number,
                decr_damage_gotten_percent_num: RecsType.Number,
                decr_damage_gotten_end_tick: RecsType.Number,
                incr_stamina_regen_percent_num: RecsType.Number,
                incr_stamina_regen_tick_count: RecsType.Number,
                incr_explore_reward_percent_num: RecsType.Number,
                incr_explore_reward_end_tick: RecsType.Number,
              },
            },
            charlie: {
              category: RecsType.String,
              tier: RecsType.String,
              count: RecsType.BigInt,
              stamina: {
                amount: RecsType.BigInt,
                updated_tick: RecsType.BigInt,
              },
              boosts: {
                incr_damage_dealt_percent_num: RecsType.Number,
                incr_damage_dealt_end_tick: RecsType.Number,
                decr_damage_gotten_percent_num: RecsType.Number,
                decr_damage_gotten_end_tick: RecsType.Number,
                incr_stamina_regen_percent_num: RecsType.Number,
                incr_stamina_regen_tick_count: RecsType.Number,
                incr_explore_reward_percent_num: RecsType.Number,
                incr_explore_reward_end_tick: RecsType.Number,
              },
            },
            bravo: {
              category: RecsType.String,
              tier: RecsType.String,
              count: RecsType.BigInt,
              stamina: {
                amount: RecsType.BigInt,
                updated_tick: RecsType.BigInt,
              },
              boosts: {
                incr_damage_dealt_percent_num: RecsType.Number,
                incr_damage_dealt_end_tick: RecsType.Number,
                decr_damage_gotten_percent_num: RecsType.Number,
                decr_damage_gotten_end_tick: RecsType.Number,
                incr_stamina_regen_percent_num: RecsType.Number,
                incr_stamina_regen_tick_count: RecsType.Number,
                incr_explore_reward_percent_num: RecsType.Number,
                incr_explore_reward_end_tick: RecsType.Number,
              },
            },
            alpha: {
              category: RecsType.String,
              tier: RecsType.String,
              count: RecsType.BigInt,
              stamina: {
                amount: RecsType.BigInt,
                updated_tick: RecsType.BigInt,
              },
              boosts: {
                incr_damage_dealt_percent_num: RecsType.Number,
                incr_damage_dealt_end_tick: RecsType.Number,
                decr_damage_gotten_percent_num: RecsType.Number,
                decr_damage_gotten_end_tick: RecsType.Number,
                incr_stamina_regen_percent_num: RecsType.Number,
                incr_stamina_regen_tick_count: RecsType.Number,
                incr_explore_reward_percent_num: RecsType.Number,
                incr_explore_reward_end_tick: RecsType.Number,
              },
            },
            delta_destroyed_tick: RecsType.Number,
            charlie_destroyed_tick: RecsType.Number,
            bravo_destroyed_tick: RecsType.Number,
            alpha_destroyed_tick: RecsType.Number,
          },
          troop_explorers: RecsType.NumberArray,
          resources_packed: RecsType.BigInt,
          metadata: {
            realm_id: RecsType.Number,
            order: RecsType.Number,
            has_wonder: RecsType.Boolean,
            villages_count: RecsType.Number,
            village_realm: RecsType.Number,
          },
          category: RecsType.Number,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Structure",
            types: [
              "u32",
              "ContractAddress",
              "u8",
              "u16",
              "u8",
              "u16",
              "u32",
              "u8",
              "u32",
              "u32",
              "u8",
              //delta
              "enum",
              "enum",
              "u128",
              "u64",
              "u64",
              "u16",
              "u32",
              "u16",
              "u32",
              "u16",
              "u8",
              "u16",
              "u32",
              //charlie
              "enum",
              "enum",
              "u128",
              "u64",
              "u64",
              "u16",
              "u32",
              "u16",
              "u32",
              "u16",
              "u8",
              "u16",
              "u32",
              //bravo
              "enum",
              "enum",
              "u128",
              "u64",
              "u64",
              "u16",
              "u32",
              "u16",
              "u32",
              "u16",
              "u8",
              "u16",
              "u32",
              //alpha
              "enum",
              "enum",
              "u128",
              "u64",
              "u64",
              "u16",
              "u32",
              "u16",
              "u32",
              "u16",
              "u8",
              "u16",
              "u32",
              //destroyed_ticks
              "u32",
              "u32",
              "u32",
              "u32",
              //explorers
              "Span<u32>",
              "u128",
              // structure metadata
              "u16",
              "u8",
              "bool",
              "u8",
              "u32",
            ],
            customTypes: ["StructureBase", "GuardTroops", "TroopType", "TroopTier", "Stamina", "StructureMetadata"],
          },
        },
      );
    })(),

    Tile: (() => {
      return defineComponent(
        world,
        {
          col: RecsType.Number,
          row: RecsType.Number,
          biome: RecsType.Number,
          occupier_id: RecsType.Number,
          occupier_type: RecsType.Number,
          occupier_is_structure: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Tile",
            types: ["u32", "u32", "u8", "u32", "u8", "bool"],
            customTypes: [],
          },
        },
      );
    })(),

    Trade: (() => {
      return defineComponent(
        world,
        {
          trade_id: RecsType.Number,
          maker_id: RecsType.Number,
          taker_id: RecsType.Number,
          expires_at: RecsType.Number,
          maker_gives_resource_type: RecsType.Number,
          taker_pays_resource_type: RecsType.Number,
          maker_gives_min_resource_amount: RecsType.BigInt,
          taker_pays_min_resource_amount: RecsType.BigInt,
          maker_gives_max_count: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "Trade",
            types: ["u32", "u32", "u32", "u32", "u8", "u8", "u64", "u64", "u64"],
            customTypes: [],
          },
        },
      );
    })(),

    WeightConfig: (() => {
      return defineComponent(
        world,
        {
          resource_type: RecsType.Number,
          weight_gram: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "WeightConfig",
            types: ["u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),

    WorldConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          admin_address: RecsType.BigInt,
          vrf_provider_address: RecsType.BigInt,
          season_addresses_config: {
            season_pass_address: RecsType.BigInt,
            realms_address: RecsType.BigInt,
            lords_address: RecsType.BigInt,
          },
          hyperstructure_config: {
            initialize_shards_amount: RecsType.BigInt,
          },
          hyperstructure_cost_config: {
            construction_resources_ids: RecsType.NumberArray,
          },
          speed_config: {
            donkey_sec_per_km: RecsType.Number,
          },
          map_config: {
            reward_resource_amount: RecsType.Number,
            shards_mines_win_probability: RecsType.Number,
            shards_mines_fail_probability: RecsType.Number,
            agent_discovery_prob: RecsType.Number,
            agent_discovery_fail_prob: RecsType.Number,
            village_find_prob: RecsType.Number,
            village_find_fail_prob: RecsType.Number,
            hyps_win_prob: RecsType.Number,
            hyps_fail_prob: RecsType.Number,
            hyps_fail_prob_increase_p_hex: RecsType.Number,
            hyps_fail_prob_increase_p_fnd: RecsType.Number,
            relic_discovery_interval_sec: RecsType.Number,
            relic_hex_dist_from_center: RecsType.Number,
            relic_chest_relics_per_chest: RecsType.Number,
          },
          settlement_config: {
            center: RecsType.Number,
            base_distance: RecsType.Number,
            subsequent_distance: RecsType.Number,
          },
          blitz_mode_on: RecsType.Boolean,
          blitz_settlement_config: {
            base_distance: RecsType.Number,
            side: RecsType.Number,
            step: RecsType.Number,
            point: RecsType.Number,
          },
          blitz_hypers_settlement_config: {
            max_ring_count: RecsType.Number,
            current_ring_count: RecsType.Number,
            point: RecsType.Number,
            side: RecsType.Number,
          },
          blitz_registration_config: {
            fee_amount: RecsType.BigInt,
            fee_token: RecsType.BigInt,
            fee_recipient: RecsType.BigInt,
            registration_count: RecsType.Number,
            registration_count_max: RecsType.Number,
            registration_start_at: RecsType.Number,
            assigned_positions_count: RecsType.Number,
          },
          tick_config: {
            armies_tick_in_seconds: RecsType.Number,
            delivery_tick_in_seconds: RecsType.Number,
          },
          bank_config: {
            lp_fee_num: RecsType.Number,
            lp_fee_denom: RecsType.Number,
            owner_fee_num: RecsType.Number,
            owner_fee_denom: RecsType.Number,
          },
          resource_bridge_config: {
            deposit_paused: RecsType.Boolean,
            withdraw_paused: RecsType.Boolean,
          },
          res_bridge_fee_split_config: {
            velords_fee_on_dpt_percent: RecsType.Number,
            velords_fee_on_wtdr_percent: RecsType.Number,
            season_pool_fee_on_dpt_percent: RecsType.Number,
            season_pool_fee_on_wtdr_percent: RecsType.Number,
            client_fee_on_dpt_percent: RecsType.Number,
            client_fee_on_wtdr_percent: RecsType.Number,
            realm_fee_dpt_percent: RecsType.Number,
            realm_fee_wtdr_percent: RecsType.Number,
            velords_fee_recipient: RecsType.BigInt,
            season_pool_fee_recipient: RecsType.BigInt,
          },
          structure_max_level_config: {
            realm_max: RecsType.Number,
            village_max: RecsType.Number,
          },
          building_config: {
            base_population: RecsType.Number,
            base_cost_percent_increase: RecsType.Number,
          },
          troop_damage_config: {
            damage_raid_percent_num: RecsType.Number,
            damage_biome_bonus_num: RecsType.Number,
            damage_beta_small: RecsType.BigInt,
            damage_beta_large: RecsType.BigInt,
            damage_scaling_factor: RecsType.BigInt,
            damage_c0: RecsType.BigInt,
            damage_delta: RecsType.BigInt,
            t1_damage_value: RecsType.BigInt,
            t2_damage_multiplier: RecsType.BigInt,
            t3_damage_multiplier: RecsType.BigInt,
          },
          troop_stamina_config: {
            stamina_gain_per_tick: RecsType.Number,
            stamina_initial: RecsType.Number,
            stamina_bonus_value: RecsType.Number,
            stamina_knight_max: RecsType.Number,
            stamina_paladin_max: RecsType.Number,
            stamina_crossbowman_max: RecsType.Number,
            stamina_attack_req: RecsType.Number,
            stamina_attack_max: RecsType.Number,
            stamina_explore_wheat_cost: RecsType.Number,
            stamina_explore_fish_cost: RecsType.Number,
            stamina_explore_stamina_cost: RecsType.Number,
            stamina_travel_wheat_cost: RecsType.Number,
            stamina_travel_fish_cost: RecsType.Number,
            stamina_travel_stamina_cost: RecsType.Number,
          },
          troop_limit_config: {
            explorer_max_party_count: RecsType.Number,
            explorer_guard_max_troop_count: RecsType.Number,
            guard_resurrection_delay: RecsType.Number,
            mercenaries_troop_lower_bound: RecsType.BigInt,
            mercenaries_troop_upper_bound: RecsType.BigInt,
            agents_troop_lower_bound: RecsType.BigInt,
            agents_troop_upper_bound: RecsType.BigInt,
          },
          capacity_config: {
            structure_capacity: RecsType.Number,
            troop_capacity: RecsType.Number,
            donkey_capacity: RecsType.Number,
            storehouse_boost_capacity: RecsType.Number,
          },
          trade_config: {
            max_count: RecsType.Number,
          },
          battle_config: {
            regular_immunity_ticks: RecsType.Number,
            hyperstructure_immunity_ticks: RecsType.Number,
          },
          realm_count_config: {
            count: RecsType.Number,
          },
          season_config: {
            start_settling_at: RecsType.Number,
            start_main_at: RecsType.Number,
            end_at: RecsType.Number,
            end_grace_seconds: RecsType.Number,
            registration_grace_seconds: RecsType.Number,
          },
          agent_controller_config: RecsType.BigInt,
          realm_start_resources_config: {
            resources_list_id: RecsType.Number,
            resources_list_count: RecsType.Number,
          },
          village_start_resources_config: {
            resources_list_id: RecsType.Number,
            resources_list_count: RecsType.Number,
          },
          village_find_resources_config: {
            resources_mm_list_id: RecsType.Number,
            resources_mm_list_count: RecsType.Number,
          },
          village_controller_config: RecsType.BigIntArray,
          village_pass_config: {
            token_address: RecsType.BigInt,
            mint_recipient_address: RecsType.BigInt,
          },
          wonder_production_bonus_config: {
            within_tile_distance: RecsType.Number,
            bonus_percent_num: RecsType.BigInt,
          },
          quest_config: {
            quest_discovery_prob: RecsType.Number,
            quest_discovery_fail_prob: RecsType.Number,
          },
          structure_capacity_config: {
            realm_capacity: RecsType.BigInt,
            village_capacity: RecsType.BigInt,
            hyperstructure_capacity: RecsType.BigInt,
            fragment_mine_capacity: RecsType.BigInt,
            bank_structure_capacity: RecsType.BigInt,
          },
          victory_points_grant_config: {
            hyp_points_per_second: RecsType.BigInt,
            claim_hyperstructure_points: RecsType.BigInt,
            claim_otherstructure_points: RecsType.BigInt,
            explore_tiles_points: RecsType.BigInt,
          },
          victory_points_win_config: {
            points_for_win: RecsType.BigInt,
          },
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "WorldConfig",
            types: [
              "u32", // config_id
              "ContractAddress", // admin_address
              "ContractAddress", // vrf_provider_address
              "ContractAddress", // season_pass_address
              "ContractAddress", // realms_address
              "ContractAddress", // lords_address
              "u128", // HyperstructureConfig initialize_shards_amount
              "Span<u8>", // HyperstructureCostConfig construction_resources_ids
              "u16", // SpeedConfig donkey_sec_per_km
              "u16", // MapConfig reward_resource_amount
              "u16", // MapConfig shards_mines_win_probability
              "u16", // MapConfig shards_mines_fail_probability
              "u16", // MapConfig agent_discovery_prob
              "u16", // MapConfig agent_discovery_fail_prob
              "u16", // MapConfig village_find_prob
              "u16", // MapConfig village_find_fail_prob
              "u32", // MapConfig hyps_win_prob
              "u32", // MapConfig hyps_fail_prob
              "u16", // MapConfig hyps_fail_prob_increase_p_hex
              "u16", // MapConfig hyps_fail_prob_increase_p_fnd
              "u32", // MapConfig mine_wheat_grant_amount
              "u32", // MapConfig mine_fish_grant_amount
              "u16", // MapConfig relic_discovery_interval_sec
              "u8", // MapConfig relic_hex_dist_from_center
              "u8", // MapConfig relic_chest_relics_per_chest
              "u32", // SettlementConfig center
              "u32", // SettlementConfig base_distance
              "u32", // SettlementConfig subsequent_distance
              "bool", // blitz_mode_on
              "u32", // BlitzSettlementConfig base_distance
              "u32", // BlitzSettlementConfig side
              "u32", // BlitzSettlementConfig step
              "u32", // BlitzSettlementConfig point
              "u8", // BlitzHypersSettlementConfig max_ring_count
              "u8", // BlitzHypersSettlementConfig current_ring_count
              "u8", // BlitzHypersSettlementConfig point
              "u32", // BlitzHypersSettlementConfig side
              "u128", // BlitzRegistrationConfig fee_amount
              "ContractAddress", // BlitzRegistrationConfig fee_token
              "ContractAddress", // BlitzRegistrationConfig fee_recipient
              "u16", // BlitzRegistrationConfig registration_count
              "u16", // BlitzRegistrationConfig registration_count_max
              "u32", // BlitzRegistrationConfig registration_start_at
              "u16", // BlitzRegistrationConfig assigned_positions_count
              "u64", // TickConfig armies_tick_in_seconds
              "u64", // TickConfig delivery_tick_in_seconds
              "u32", // BankConfig lp_fee_num
              "u32", // BankConfig lp_fee_denom
              "u32", // BankConfig owner_fee_num
              "u32", // BankConfig owner_fee_denom
              "bool", // ResourceBridgeConfig deposit_paused
              "bool", // ResourceBridgeConfig withdraw_paused
              "u16", // ResourceBridgeFeeSplitConfig velords_fee_on_dpt_percent
              "u16", // ResourceBridgeFeeSplitConfig velords_fee_on_wtdr_percent
              "u16", // ResourceBridgeFeeSplitConfig season_pool_fee_on_dpt_percent
              "u16", // ResourceBridgeFeeSplitConfig season_pool_fee_on_wtdr_percent
              "u16", // ResourceBridgeFeeSplitConfig client_fee_on_dpt_percent
              "u16", // ResourceBridgeFeeSplitConfig client_fee_on_wtdr_percent
              "u16", // ResourceBridgeFeeSplitConfig realm_fee_dpt_percent
              "u16", // ResourceBridgeFeeSplitConfig realm_fee_wtdr_percent
              "ContractAddress", // ResourceBridgeFeeSplitConfig velords_fee_recipient
              "ContractAddress", // ResourceBridgeFeeSplitConfig season_pool_fee_recipient
              "u8", // StructureMaxLevelConfig realm_max
              "u8", // StructureMaxLevelConfig village_max
              "u32", // BuildingConfig base_population
              "u16", // BuildingConfig base_cost_percent_increase
              "u16", // TroopDamageConfig damage_raid_percent_num
              "u16", // TroopDamageConfig damage_biome_bonus_num
              "u64", // TroopDamageConfig damage_beta_small
              "u64", // TroopDamageConfig damage_beta_large
              "u128", // TroopDamageConfig damage_scaling_factor
              "u128", // TroopDamageConfig damage_c0
              "u128", // TroopDamageConfig damage_delta
              "u128", // TroopDamageConfig t1_damage_value
              "u128", // TroopDamageConfig t2_damage_multiplier
              "u128", // TroopDamageConfig t3_damage_multiplier
              "u16", // TroopStaminaConfig stamina_gain_per_tick
              "u16", // TroopStaminaConfig stamina_initial
              "u16", // TroopStaminaConfig stamina_bonus_value
              "u16", // TroopStaminaConfig stamina_knight_max
              "u16", // TroopStaminaConfig stamina_paladin_max
              "u16", // TroopStaminaConfig stamina_crossbowman_max
              "u16", // TroopStaminaConfig stamina_attack_req
              "u16", // TroopStaminaConfig stamina_attack_max
              "u16", // TroopStaminaConfig stamina_explore_wheat_cost
              "u16", // TroopStaminaConfig stamina_explore_fish_cost
              "u16", // TroopStaminaConfig stamina_explore_stamina_cost
              "u16", // TroopStaminaConfig stamina_travel_wheat_cost
              "u16", // TroopStaminaConfig stamina_travel_fish_cost
              "u16", // TroopStaminaConfig stamina_travel_stamina_cost
              "u8", // TroopLimitConfig explorer_max_party_count
              "u32", // TroopLimitConfig explorer_guard_max_troop_count
              "u32", // TroopLimitConfig guard_resurrection_delay
              "u32", // TroopLimitConfig mercenaries_troop_lower_bound
              "u32", // TroopLimitConfig mercenaries_troop_upper_bound
              "u32", // TroopLimitConfig agents_troop_lower_bound
              "u32", // TroopLimitConfig agents_troop_upper_bound
              "u32", // CapacityConfig structure_capacity
              "u32", // CapacityConfig troop_capacity
              "u32", // CapacityConfig donkey_capacity
              "u32", // CapacityConfig storehouse_boost_capacity
              "u8", // TradeConfig max_count
              "u8", // BattleConfig regular_immunity_ticks
              "u8", // BattleConfig hyperstructure_immunity_ticks
              "u16", // RealmCountConfig realm_count
              "u64", // SeasonConfig start_settling_at
              "u64", // SeasonConfig start_main_at
              "u64", // SeasonConfig end_at
              "u32", // SeasonConfig end_grace_seconds
              "u32", // SeasonConfig registration_grace_seconds
              "ContractAddress", // AgentControllerConfig address
              "u32", // realm StartingResourcesConfig resources_list_id
              "u8", // realm StartingResourcesConfig resources_list_count
              "u32", // village StartingResourcesConfig resources_list_id
              "u8", // village StartingResourcesConfig resources_list_count
              "u32", // village_find_resources_config resources_mm_list_id
              "u8", // village_find_resources_config resources_mm_list_count
              "Span<ContractAddress>", // village controller addresses
              "ContractAddress", // village VillageTokenConfig token_address
              "ContractAddress", // village VillageTokenConfig mint_recipient_address
              "u8", // WonderProductionBonusConfig within_tile_distance
              "u128", // WonderProductionBonusConfig bonus_percent_num
              "u16", // QuestConfig quest_discovery_prob
              "u16", // QuestConfig quest_discovery_fail_prob
              "u64", // StructureCapacityConfig realm_structure_capacity
              "u64", // StructureCapacityConfig village_structure_capacity
              "u64", // StructureCapacityConfig hyperstructure_structure_capacity
              "u64", // StructureCapacityConfig fragment_mine_structure_capacity
              "u64", // StructureCapacityConfig bank_structure_capacity
              "u32", // VictoryPointsGrantConfig hyp_points_per_second
              "u32", // VictoryPointsGrantConfig claim_hyperstructure_points
              "u32", // VictoryPointsGrantConfig claim_otherstructure_points
              "u32", // VictoryPointsGrantConfig explore_tiles_points
              "u128", // VictoryPointsWinConfig points_for_win
            ],
            customTypes: [],
          },
        },
      );
    })(),
    BlitzRealmPlayerRegister: (() => {
      return defineComponent(
        world,
        {
          player: RecsType.BigInt,
          registered: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "s1_eternum",
            name: "BlitzRealmPlayerRegister",
            types: ["ContractAddress", "bool"],
            customTypes: [],
          },
        },
      );
    })(),
    ...eventsComponents(world),
  };
}

const eventsComponents = (world: World) => {
  return {
    events: {
      SeasonEnded: (() => {
        return defineComponent(
          world,
          {
            winner_address: RecsType.BigInt,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "SeasonEnded",
              types: ["ContractAddress", "u64"],
              customTypes: [],
            },
          },
        );
      })(),
      AcceptOrder: (() => {
        return defineComponent(
          world,
          {
            taker_id: RecsType.Number,
            maker_id: RecsType.Number,
            id: RecsType.Number,
            trade_id: RecsType.Number,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "AcceptOrder",
              types: ["u32", "u32", "u32", "u32", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      BurnDonkey: (() => {
        return defineComponent(
          world,
          {
            player_address: RecsType.BigInt,
            entity_id: RecsType.Number,
            amount: RecsType.BigInt,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "BurnDonkey",
              types: ["ContractAddress", "u32", "u128", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      LiquidityEvent: (() => {
        return defineComponent(
          world,
          {
            bank_entity_id: RecsType.Number,
            entity_id: RecsType.Number,
            resource_type: RecsType.Number,
            lords_amount: RecsType.BigInt,
            resource_amount: RecsType.BigInt,
            resource_price: RecsType.BigInt,
            add: RecsType.Boolean,
            timestamp: RecsType.BigInt,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "LiquidityEvent",
              types: ["u32", "u32", "u8", "u128", "u128", "u128", "bool", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      SwapEvent: (() => {
        return defineComponent(
          world,
          {
            bank_entity_id: RecsType.Number,
            entity_id: RecsType.Number,
            id: RecsType.Number,
            resource_type: RecsType.Number,
            lords_amount: RecsType.BigInt,
            resource_amount: RecsType.BigInt,
            bank_owner_fees: RecsType.BigInt,
            lp_fees: RecsType.BigInt,
            resource_price: RecsType.BigInt,
            buy: RecsType.Boolean,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "SwapEvent",
              types: ["u32", "u32", "u32", "u8", "u128", "u128", "u128", "u128", "u128", "bool", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      SettleRealmData: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            event_id: RecsType.String,
            entity_id: RecsType.Number,
            owner_address: RecsType.BigInt,
            owner_name: RecsType.BigInt,
            realm_name: RecsType.BigInt,
            produced_resources: RecsType.BigInt,
            cities: RecsType.Number,
            harbors: RecsType.Number,
            rivers: RecsType.Number,
            regions: RecsType.Number,
            wonder: RecsType.Number,
            order: RecsType.Number,
            x: RecsType.Number,
            y: RecsType.Number,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "SettleRealmData",
              types: [
                "u32",
                "EventType",
                "u32",
                "ContractAddress",
                "felt252",
                "felt252",
                "u128",
                "u8",
                "u8",
                "u8",
                "u8",
                "u8",
                "u8",
                "u32",
                "u32",
                "u64",
              ],
              customTypes: [],
            },
          },
        );
      })(),

      ExplorerRaidEvent: (() => {
        return defineComponent(
          world,
          {
            explorer_id: RecsType.Number,
            structure_id: RecsType.Number,
            success: RecsType.Boolean,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "ExplorerRaidEvent",
              types: ["u32", "u32", "bool", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      OpenRelicChestEvent: (() => {
        return defineComponent(
          world,
          {
            explorer_id: RecsType.Number,
            chest_coord: {
              x: RecsType.Number,
              y: RecsType.Number,
            },
            relics: RecsType.NumberArray,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "OpenRelicChestEvent",
              types: ["u32", "u32", "u32", "Span<u8>", "u64"],
              customTypes: ["Coord"],
            },
          },
        );
      })(),

      ExplorerMoveEvent: (() => {
        return defineComponent(
          world,
          {
            explorer_id: RecsType.Number,
            explorer_structure_id: RecsType.Number,
            explorer_owner_address: RecsType.String,
            explore_find: RecsType.Number,
            reward_resource_type: RecsType.Number,
            reward_resource_amount: RecsType.BigInt,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "s1_eternum",
              name: "ExplorerMoveEvent",
              types: ["u32", "u32", "ContractAddress", "ExploreFind", "u8", "u128", "u64"],
              customTypes: [],
            },
          },
        );
      })(),
    },
  };
};
