/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as MyEmpireImport } from "./routes/my-empire";

// Create Virtual Routes

const TradeLazyImport = createFileRoute("/trade")();
const PassesLazyImport = createFileRoute("/passes")();
const MintLazyImport = createFileRoute("/mint")();
const BridgeLazyImport = createFileRoute("/bridge")();
const IndexLazyImport = createFileRoute("/")();

// Create/Update Routes

const TradeLazyRoute = TradeLazyImport.update({
  id: "/trade",
  path: "/trade",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/trade.lazy").then((d) => d.Route));

const PassesLazyRoute = PassesLazyImport.update({
  id: "/passes",
  path: "/passes",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/passes.lazy").then((d) => d.Route));

const MintLazyRoute = MintLazyImport.update({
  id: "/mint",
  path: "/mint",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/mint.lazy").then((d) => d.Route));

const BridgeLazyRoute = BridgeLazyImport.update({
  id: "/bridge",
  path: "/bridge",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/bridge.lazy").then((d) => d.Route));

const MyEmpireRoute = MyEmpireImport.update({
  id: "/my-empire",
  path: "/my-empire",
  getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/my-empire": {
      id: "/my-empire";
      path: "/my-empire";
      fullPath: "/my-empire";
      preLoaderRoute: typeof MyEmpireImport;
      parentRoute: typeof rootRoute;
    };
    "/bridge": {
      id: "/bridge";
      path: "/bridge";
      fullPath: "/bridge";
      preLoaderRoute: typeof BridgeLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/mint": {
      id: "/mint";
      path: "/mint";
      fullPath: "/mint";
      preLoaderRoute: typeof MintLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/passes": {
      id: "/passes";
      path: "/passes";
      fullPath: "/passes";
      preLoaderRoute: typeof PassesLazyImport;
      parentRoute: typeof rootRoute;
    };
    "/trade": {
      id: "/trade";
      path: "/trade";
      fullPath: "/trade";
      preLoaderRoute: typeof TradeLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute;
  "/my-empire": typeof MyEmpireRoute;
  "/bridge": typeof BridgeLazyRoute;
  "/mint": typeof MintLazyRoute;
  "/passes": typeof PassesLazyRoute;
  "/trade": typeof TradeLazyRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute;
  "/my-empire": typeof MyEmpireRoute;
  "/bridge": typeof BridgeLazyRoute;
  "/mint": typeof MintLazyRoute;
  "/passes": typeof PassesLazyRoute;
  "/trade": typeof TradeLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexLazyRoute;
  "/my-empire": typeof MyEmpireRoute;
  "/bridge": typeof BridgeLazyRoute;
  "/mint": typeof MintLazyRoute;
  "/passes": typeof PassesLazyRoute;
  "/trade": typeof TradeLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/my-empire" | "/bridge" | "/mint" | "/passes" | "/trade";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/my-empire" | "/bridge" | "/mint" | "/passes" | "/trade";
  id: "__root__" | "/" | "/my-empire" | "/bridge" | "/mint" | "/passes" | "/trade";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  MyEmpireRoute: typeof MyEmpireRoute;
  BridgeLazyRoute: typeof BridgeLazyRoute;
  MintLazyRoute: typeof MintLazyRoute;
  PassesLazyRoute: typeof PassesLazyRoute;
  TradeLazyRoute: typeof TradeLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MyEmpireRoute: MyEmpireRoute,
  BridgeLazyRoute: BridgeLazyRoute,
  MintLazyRoute: MintLazyRoute,
  PassesLazyRoute: PassesLazyRoute,
  TradeLazyRoute: TradeLazyRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/my-empire",
        "/bridge",
        "/mint",
        "/passes",
        "/trade"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/my-empire": {
      "filePath": "my-empire.tsx"
    },
    "/bridge": {
      "filePath": "bridge.lazy.tsx"
    },
    "/mint": {
      "filePath": "mint.lazy.tsx"
    },
    "/passes": {
      "filePath": "passes.lazy.tsx"
    },
    "/trade": {
      "filePath": "trade.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
