/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  query getCapacitySpeedConfig {\n    s1EternumWorldConfigModels {\n      edges {\n        node {\n          capacity_config {\n            donkey_capacity\n          }\n          speed_config {\n            donkey_sec_per_km\n          }\n        }\n      }\n    }\n  }\n": types.GetCapacitySpeedConfigDocument,
    "\n  query getEternumOwnerRealmIds($accountAddress: ContractAddress!) {\n    s1EternumStructureModels(where: { owner: $accountAddress }, limit: 8000) {\n      edges {\n        node {\n          owner\n          entity_id\n          metadata {\n            realm_id\n          }\n        }\n      }\n    }\n  }\n": types.GetEternumOwnerRealmIdsDocument,
    "\n  query getEternumEntityOwner($entityOwnerIds: [u32!]!) {\n    s1EternumResourceArrivalModels(where: { structure_idIN: $entityOwnerIds }, limit: 10000) {\n      edges {\n        node {\n          structure_id\n          slot_1 {\n            _0\n            _1\n          }\n          slot_2 {\n            _0\n            _1\n          }\n          slot_3 {\n            _0\n            _1\n          }\n          slot_4 {\n            _0\n            _1\n          }\n          slot_5 {\n            _0\n            _1\n          }\n          slot_6 {\n            _0\n            _1\n          }\n          slot_7 {\n            _0\n            _1\n          }\n          slot_8 {\n            _0\n            _1\n          }\n          slot_9 {\n            _0\n            _1\n          }\n          slot_10 {\n            _0\n            _1\n          }\n          slot_11 {\n            _0\n            _1\n          }\n          slot_12 {\n            _0\n            _1\n          }\n          slot_13 {\n            _0\n            _1\n          }\n          slot_14 {\n            _0\n            _1\n          }\n          slot_15 {\n            _0\n            _1\n          }\n          slot_16 {\n            _0\n            _1\n          }\n          slot_17 {\n            _0\n            _1\n          }\n          slot_18 {\n            _0\n            _1\n          }\n          slot_19 {\n            _0\n            _1\n          }\n          slot_20 {\n            _0\n            _1\n          }\n          slot_21 {\n            _0\n            _1\n          }\n          slot_22 {\n            _0\n            _1\n          }\n          slot_23 {\n            _0\n            _1\n          }\n          slot_24 {\n            _0\n            _1\n          }\n        }\n      }\n    }\n  }\n": types.GetEternumEntityOwnerDocument,
    "\n  query getAccountTokens($accountAddress: String!) {\n    tokenBalances(accountAddress: $accountAddress, limit: 8000) {\n      edges {\n        node {\n          tokenMetadata {\n            __typename\n            ... on ERC721__Token {\n              tokenId\n              metadataDescription\n              imagePath\n              contractAddress\n              metadata\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetAccountTokensDocument,
    "\n  query getERC721Mints {\n    tokenTransfers(accountAddress: \"0x0\", limit: 8000) {\n      edges {\n        node {\n          tokenMetadata {\n            __typename\n            ... on ERC721__Token {\n              tokenId\n              metadataDescription\n              imagePath\n              contractAddress\n              metadata\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetErc721MintsDocument,
    "\n  query eternumStatistics {\n    s1EternumAddressNameModels {\n      totalCount\n    }\n    realms: s1EternumStructureModels(where: { category: 1 }) {\n      totalCount\n    }\n    hyperstructures: s1EternumStructureModels(where: { category: 2 }) {\n      totalCount\n    }\n    banks: s1EternumStructureModels(where: { category: 3 }) {\n      totalCount\n    }\n    mines: s1EternumStructureModels(where: { category: 4 }) {\n      totalCount\n    }\n    villages: s1EternumStructureModels(where: { category: 5 }) {\n      totalCount\n    }\n  }\n": types.EternumStatisticsDocument,
    "\n  query hasGameEnded {\n    s1EternumGameEndedModels {\n      edges {\n        node {\n          winner_address\n        }\n      }\n    }\n  }\n": types.HasGameEndedDocument,
    "\n  query getLeaderboardEntry($accountAddress: ContractAddress!) {\n    s1EternumLeaderboardEntryModels(where: { address: $accountAddress }) {\n      edges {\n        node {\n          address\n          points\n        }\n      }\n    }\n  }\n": types.GetLeaderboardEntryDocument,
    "\n  query getLeaderboard {\n    s1EternumLeaderboardModels {\n      edges {\n        node {\n          total_points\n          registration_end_timestamp\n          total_price_pool {\n            Some\n            option\n          }\n          distribution_started\n        }\n      }\n    }\n  }\n": types.GetLeaderboardDocument,
    "\n  query getHyperstructureContributions($accountAddress: ContractAddress!) {\n    s1EternumContributionModels(where: { player_address: $accountAddress }, limit: 1000) {\n      edges {\n        node {\n          hyperstructure_entity_id\n          amount\n        }\n      }\n    }\n  }\n": types.GetHyperstructureContributionsDocument,
    "\n  query getEpochs {\n    s1EternumEpochModels(limit: 1000) {\n      edges {\n        node {\n          owners {\n            _0\n            _1\n          }\n          start_timestamp\n          hyperstructure_entity_id\n          index\n        }\n      }\n    }\n  }\n": types.GetEpochsDocument,
    "\n  query getEntityPosition($entityIds: [u32!]!) {\n    s1EternumStructureModels(where: { entity_idIN: $entityIds }, limit: 8000) {\n      edges {\n        node {\n          base {\n            coord_x\n            coord_y\n          }\n          entity_id\n          entity {\n            __typename\n          }\n        }\n      }\n    }\n  }\n": types.GetEntityPositionDocument,
    "\n  query getEntitiesResources($entityIds: [u32!]!) {\n    s1EternumResourceModels(where: { entity_idIN: $entityIds }, limit: 8000) {\n      edges {\n        node {\n          entity_id\n          STONE_BALANCE\n          COAL_BALANCE\n          WOOD_BALANCE\n          COPPER_BALANCE\n          IRONWOOD_BALANCE\n          OBSIDIAN_BALANCE\n          GOLD_BALANCE\n          SILVER_BALANCE\n          MITHRAL_BALANCE\n          ALCHEMICAL_SILVER_BALANCE\n          COLD_IRON_BALANCE\n          DEEP_CRYSTAL_BALANCE\n          RUBY_BALANCE\n          DIAMONDS_BALANCE\n          HARTWOOD_BALANCE\n          IGNIUM_BALANCE\n          TWILIGHT_QUARTZ_BALANCE\n          TRUE_ICE_BALANCE\n          ADAMANTINE_BALANCE\n          SAPPHIRE_BALANCE\n          ETHEREAL_SILICA_BALANCE\n          DRAGONHIDE_BALANCE\n          LABOR_BALANCE\n          EARTHEN_SHARD_BALANCE\n          DONKEY_BALANCE\n          KNIGHT_T1_BALANCE\n          KNIGHT_T2_BALANCE\n          KNIGHT_T3_BALANCE\n          CROSSBOWMAN_T1_BALANCE\n          CROSSBOWMAN_T2_BALANCE\n          CROSSBOWMAN_T3_BALANCE\n          PALADIN_T1_BALANCE\n          PALADIN_T2_BALANCE\n          PALADIN_T3_BALANCE\n          WHEAT_BALANCE\n          FISH_BALANCE\n          LORDS_BALANCE\n          STONE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          COAL_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          WOOD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          COPPER_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          IRONWOOD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          OBSIDIAN_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          GOLD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          SILVER_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          MITHRAL_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          ALCHEMICAL_SILVER_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          COLD_IRON_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          DEEP_CRYSTAL_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          RUBY_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          DIAMONDS_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          HARTWOOD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          IGNIUM_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          TWILIGHT_QUARTZ_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          TRUE_ICE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          ADAMANTINE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          SAPPHIRE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          ETHEREAL_SILICA_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          DRAGONHIDE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          LABOR_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          EARTHEN_SHARD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          DONKEY_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          KNIGHT_T1_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          KNIGHT_T2_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          KNIGHT_T3_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          CROSSBOWMAN_T1_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          CROSSBOWMAN_T2_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          CROSSBOWMAN_T3_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          PALADIN_T1_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          PALADIN_T2_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          PALADIN_T3_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          WHEAT_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          FISH_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          LORDS_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n        }\n      }\n    }\n  }\n": types.GetEntitiesResourcesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getCapacitySpeedConfig {\n    s1EternumWorldConfigModels {\n      edges {\n        node {\n          capacity_config {\n            donkey_capacity\n          }\n          speed_config {\n            donkey_sec_per_km\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetCapacitySpeedConfigDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEternumOwnerRealmIds($accountAddress: ContractAddress!) {\n    s1EternumStructureModels(where: { owner: $accountAddress }, limit: 8000) {\n      edges {\n        node {\n          owner\n          entity_id\n          metadata {\n            realm_id\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetEternumOwnerRealmIdsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEternumEntityOwner($entityOwnerIds: [u32!]!) {\n    s1EternumResourceArrivalModels(where: { structure_idIN: $entityOwnerIds }, limit: 10000) {\n      edges {\n        node {\n          structure_id\n          slot_1 {\n            _0\n            _1\n          }\n          slot_2 {\n            _0\n            _1\n          }\n          slot_3 {\n            _0\n            _1\n          }\n          slot_4 {\n            _0\n            _1\n          }\n          slot_5 {\n            _0\n            _1\n          }\n          slot_6 {\n            _0\n            _1\n          }\n          slot_7 {\n            _0\n            _1\n          }\n          slot_8 {\n            _0\n            _1\n          }\n          slot_9 {\n            _0\n            _1\n          }\n          slot_10 {\n            _0\n            _1\n          }\n          slot_11 {\n            _0\n            _1\n          }\n          slot_12 {\n            _0\n            _1\n          }\n          slot_13 {\n            _0\n            _1\n          }\n          slot_14 {\n            _0\n            _1\n          }\n          slot_15 {\n            _0\n            _1\n          }\n          slot_16 {\n            _0\n            _1\n          }\n          slot_17 {\n            _0\n            _1\n          }\n          slot_18 {\n            _0\n            _1\n          }\n          slot_19 {\n            _0\n            _1\n          }\n          slot_20 {\n            _0\n            _1\n          }\n          slot_21 {\n            _0\n            _1\n          }\n          slot_22 {\n            _0\n            _1\n          }\n          slot_23 {\n            _0\n            _1\n          }\n          slot_24 {\n            _0\n            _1\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetEternumEntityOwnerDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAccountTokens($accountAddress: String!) {\n    tokenBalances(accountAddress: $accountAddress, limit: 8000) {\n      edges {\n        node {\n          tokenMetadata {\n            __typename\n            ... on ERC721__Token {\n              tokenId\n              metadataDescription\n              imagePath\n              contractAddress\n              metadata\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetAccountTokensDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getERC721Mints {\n    tokenTransfers(accountAddress: \"0x0\", limit: 8000) {\n      edges {\n        node {\n          tokenMetadata {\n            __typename\n            ... on ERC721__Token {\n              tokenId\n              metadataDescription\n              imagePath\n              contractAddress\n              metadata\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetErc721MintsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query eternumStatistics {\n    s1EternumAddressNameModels {\n      totalCount\n    }\n    realms: s1EternumStructureModels(where: { category: 1 }) {\n      totalCount\n    }\n    hyperstructures: s1EternumStructureModels(where: { category: 2 }) {\n      totalCount\n    }\n    banks: s1EternumStructureModels(where: { category: 3 }) {\n      totalCount\n    }\n    mines: s1EternumStructureModels(where: { category: 4 }) {\n      totalCount\n    }\n    villages: s1EternumStructureModels(where: { category: 5 }) {\n      totalCount\n    }\n  }\n"): typeof import('./graphql').EternumStatisticsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query hasGameEnded {\n    s1EternumGameEndedModels {\n      edges {\n        node {\n          winner_address\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').HasGameEndedDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getLeaderboardEntry($accountAddress: ContractAddress!) {\n    s1EternumLeaderboardEntryModels(where: { address: $accountAddress }) {\n      edges {\n        node {\n          address\n          points\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetLeaderboardEntryDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getLeaderboard {\n    s1EternumLeaderboardModels {\n      edges {\n        node {\n          total_points\n          registration_end_timestamp\n          total_price_pool {\n            Some\n            option\n          }\n          distribution_started\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetLeaderboardDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getHyperstructureContributions($accountAddress: ContractAddress!) {\n    s1EternumContributionModels(where: { player_address: $accountAddress }, limit: 1000) {\n      edges {\n        node {\n          hyperstructure_entity_id\n          amount\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetHyperstructureContributionsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEpochs {\n    s1EternumEpochModels(limit: 1000) {\n      edges {\n        node {\n          owners {\n            _0\n            _1\n          }\n          start_timestamp\n          hyperstructure_entity_id\n          index\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetEpochsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEntityPosition($entityIds: [u32!]!) {\n    s1EternumStructureModels(where: { entity_idIN: $entityIds }, limit: 8000) {\n      edges {\n        node {\n          base {\n            coord_x\n            coord_y\n          }\n          entity_id\n          entity {\n            __typename\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetEntityPositionDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEntitiesResources($entityIds: [u32!]!) {\n    s1EternumResourceModels(where: { entity_idIN: $entityIds }, limit: 8000) {\n      edges {\n        node {\n          entity_id\n          STONE_BALANCE\n          COAL_BALANCE\n          WOOD_BALANCE\n          COPPER_BALANCE\n          IRONWOOD_BALANCE\n          OBSIDIAN_BALANCE\n          GOLD_BALANCE\n          SILVER_BALANCE\n          MITHRAL_BALANCE\n          ALCHEMICAL_SILVER_BALANCE\n          COLD_IRON_BALANCE\n          DEEP_CRYSTAL_BALANCE\n          RUBY_BALANCE\n          DIAMONDS_BALANCE\n          HARTWOOD_BALANCE\n          IGNIUM_BALANCE\n          TWILIGHT_QUARTZ_BALANCE\n          TRUE_ICE_BALANCE\n          ADAMANTINE_BALANCE\n          SAPPHIRE_BALANCE\n          ETHEREAL_SILICA_BALANCE\n          DRAGONHIDE_BALANCE\n          LABOR_BALANCE\n          EARTHEN_SHARD_BALANCE\n          DONKEY_BALANCE\n          KNIGHT_T1_BALANCE\n          KNIGHT_T2_BALANCE\n          KNIGHT_T3_BALANCE\n          CROSSBOWMAN_T1_BALANCE\n          CROSSBOWMAN_T2_BALANCE\n          CROSSBOWMAN_T3_BALANCE\n          PALADIN_T1_BALANCE\n          PALADIN_T2_BALANCE\n          PALADIN_T3_BALANCE\n          WHEAT_BALANCE\n          FISH_BALANCE\n          LORDS_BALANCE\n          STONE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          COAL_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          WOOD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          COPPER_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          IRONWOOD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          OBSIDIAN_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          GOLD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          SILVER_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          MITHRAL_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          ALCHEMICAL_SILVER_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          COLD_IRON_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          DEEP_CRYSTAL_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          RUBY_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          DIAMONDS_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          HARTWOOD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          IGNIUM_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          TWILIGHT_QUARTZ_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          TRUE_ICE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          ADAMANTINE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          SAPPHIRE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          ETHEREAL_SILICA_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          DRAGONHIDE_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          LABOR_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          EARTHEN_SHARD_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          DONKEY_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          KNIGHT_T1_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          KNIGHT_T2_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          KNIGHT_T3_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          CROSSBOWMAN_T1_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          CROSSBOWMAN_T2_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          CROSSBOWMAN_T3_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          PALADIN_T1_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          PALADIN_T2_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          PALADIN_T3_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          WHEAT_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          FISH_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n          LORDS_PRODUCTION {\n            building_count\n            production_rate\n            output_amount_left\n            last_updated_at\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetEntitiesResourcesDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
