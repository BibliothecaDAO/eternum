/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CollectionCollectionRouteImport } from './routes/collection/$collection/route'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const AddressIndexLazyImport = createFileRoute('/$address/')()
const CollectionCollectionIndexLazyImport = createFileRoute(
  '/collection/$collection/',
)()
const CollectionCollectionActivityLazyImport = createFileRoute(
  '/collection/$collection/activity',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AddressIndexLazyRoute = AddressIndexLazyImport.update({
  id: '/$address/',
  path: '/$address/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/$address/index.lazy').then((d) => d.Route),
)

const CollectionCollectionRouteRoute = CollectionCollectionRouteImport.update({
  id: '/collection/$collection',
  path: '/collection/$collection',
  getParentRoute: () => rootRoute,
} as any)

const CollectionCollectionIndexLazyRoute =
  CollectionCollectionIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => CollectionCollectionRouteRoute,
  } as any).lazy(() =>
    import('./routes/collection/$collection/index.lazy').then((d) => d.Route),
  )

const CollectionCollectionActivityLazyRoute =
  CollectionCollectionActivityLazyImport.update({
    id: '/activity',
    path: '/activity',
    getParentRoute: () => CollectionCollectionRouteRoute,
  } as any).lazy(() =>
    import('./routes/collection/$collection/activity.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/collection/$collection': {
      id: '/collection/$collection'
      path: '/collection/$collection'
      fullPath: '/collection/$collection'
      preLoaderRoute: typeof CollectionCollectionRouteImport
      parentRoute: typeof rootRoute
    }
    '/$address/': {
      id: '/$address/'
      path: '/$address'
      fullPath: '/$address'
      preLoaderRoute: typeof AddressIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/collection/$collection/activity': {
      id: '/collection/$collection/activity'
      path: '/activity'
      fullPath: '/collection/$collection/activity'
      preLoaderRoute: typeof CollectionCollectionActivityLazyImport
      parentRoute: typeof CollectionCollectionRouteImport
    }
    '/collection/$collection/': {
      id: '/collection/$collection/'
      path: '/'
      fullPath: '/collection/$collection/'
      preLoaderRoute: typeof CollectionCollectionIndexLazyImport
      parentRoute: typeof CollectionCollectionRouteImport
    }
  }
}

// Create and export the route tree

interface CollectionCollectionRouteRouteChildren {
  CollectionCollectionActivityLazyRoute: typeof CollectionCollectionActivityLazyRoute
  CollectionCollectionIndexLazyRoute: typeof CollectionCollectionIndexLazyRoute
}

const CollectionCollectionRouteRouteChildren: CollectionCollectionRouteRouteChildren =
  {
    CollectionCollectionActivityLazyRoute:
      CollectionCollectionActivityLazyRoute,
    CollectionCollectionIndexLazyRoute: CollectionCollectionIndexLazyRoute,
  }

const CollectionCollectionRouteRouteWithChildren =
  CollectionCollectionRouteRoute._addFileChildren(
    CollectionCollectionRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/collection/$collection': typeof CollectionCollectionRouteRouteWithChildren
  '/$address': typeof AddressIndexLazyRoute
  '/collection/$collection/activity': typeof CollectionCollectionActivityLazyRoute
  '/collection/$collection/': typeof CollectionCollectionIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/$address': typeof AddressIndexLazyRoute
  '/collection/$collection/activity': typeof CollectionCollectionActivityLazyRoute
  '/collection/$collection': typeof CollectionCollectionIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/collection/$collection': typeof CollectionCollectionRouteRouteWithChildren
  '/$address/': typeof AddressIndexLazyRoute
  '/collection/$collection/activity': typeof CollectionCollectionActivityLazyRoute
  '/collection/$collection/': typeof CollectionCollectionIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/collection/$collection'
    | '/$address'
    | '/collection/$collection/activity'
    | '/collection/$collection/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$address'
    | '/collection/$collection/activity'
    | '/collection/$collection'
  id:
    | '__root__'
    | '/'
    | '/collection/$collection'
    | '/$address/'
    | '/collection/$collection/activity'
    | '/collection/$collection/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CollectionCollectionRouteRoute: typeof CollectionCollectionRouteRouteWithChildren
  AddressIndexLazyRoute: typeof AddressIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CollectionCollectionRouteRoute: CollectionCollectionRouteRouteWithChildren,
  AddressIndexLazyRoute: AddressIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/collection/$collection",
        "/$address/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/collection/$collection": {
      "filePath": "collection/$collection/route.tsx",
      "children": [
        "/collection/$collection/activity",
        "/collection/$collection/"
      ]
    },
    "/$address/": {
      "filePath": "$address/index.lazy.tsx"
    },
    "/collection/$collection/activity": {
      "filePath": "collection/$collection/activity.lazy.tsx",
      "parent": "/collection/$collection"
    },
    "/collection/$collection/": {
      "filePath": "collection/$collection/index.lazy.tsx",
      "parent": "/collection/$collection"
    }
  }
}
ROUTE_MANIFEST_END */
