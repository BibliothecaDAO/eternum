/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as CollectionCollectionRouteRouteImport } from './routes/collection/$collection/route'

const IndexLazyRouteImport = createFileRoute('/')()
const AccountAddressIndexLazyRouteImport =
  createFileRoute('/$accountAddress/')()
const CollectionCollectionIndexLazyRouteImport = createFileRoute(
  '/collection/$collection/',
)()
const CollectionCollectionActivityLazyRouteImport = createFileRoute(
  '/collection/$collection/activity',
)()

const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const AccountAddressIndexLazyRoute = AccountAddressIndexLazyRouteImport.update({
  id: '/$accountAddress/',
  path: '/$accountAddress/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/$accountAddress/index.lazy').then((d) => d.Route),
)
const CollectionCollectionRouteRoute =
  CollectionCollectionRouteRouteImport.update({
    id: '/collection/$collection',
    path: '/collection/$collection',
    getParentRoute: () => rootRouteImport,
  } as any)
const CollectionCollectionIndexLazyRoute =
  CollectionCollectionIndexLazyRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => CollectionCollectionRouteRoute,
  } as any).lazy(() =>
    import('./routes/collection/$collection/index.lazy').then((d) => d.Route),
  )
const CollectionCollectionActivityLazyRoute =
  CollectionCollectionActivityLazyRouteImport.update({
    id: '/activity',
    path: '/activity',
    getParentRoute: () => CollectionCollectionRouteRoute,
  } as any).lazy(() =>
    import('./routes/collection/$collection/activity.lazy').then(
      (d) => d.Route,
    ),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/collection/$collection': typeof CollectionCollectionRouteRouteWithChildren
  '/$accountAddress': typeof AccountAddressIndexLazyRoute
  '/collection/$collection/activity': typeof CollectionCollectionActivityLazyRoute
  '/collection/$collection/': typeof CollectionCollectionIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/$accountAddress': typeof AccountAddressIndexLazyRoute
  '/collection/$collection/activity': typeof CollectionCollectionActivityLazyRoute
  '/collection/$collection': typeof CollectionCollectionIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/collection/$collection': typeof CollectionCollectionRouteRouteWithChildren
  '/$accountAddress/': typeof AccountAddressIndexLazyRoute
  '/collection/$collection/activity': typeof CollectionCollectionActivityLazyRoute
  '/collection/$collection/': typeof CollectionCollectionIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/collection/$collection'
    | '/$accountAddress'
    | '/collection/$collection/activity'
    | '/collection/$collection/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$accountAddress'
    | '/collection/$collection/activity'
    | '/collection/$collection'
  id:
    | '__root__'
    | '/'
    | '/collection/$collection'
    | '/$accountAddress/'
    | '/collection/$collection/activity'
    | '/collection/$collection/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CollectionCollectionRouteRoute: typeof CollectionCollectionRouteRouteWithChildren
  AccountAddressIndexLazyRoute: typeof AccountAddressIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$accountAddress/': {
      id: '/$accountAddress/'
      path: '/$accountAddress'
      fullPath: '/$accountAddress'
      preLoaderRoute: typeof AccountAddressIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collection/$collection': {
      id: '/collection/$collection'
      path: '/collection/$collection'
      fullPath: '/collection/$collection'
      preLoaderRoute: typeof CollectionCollectionRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collection/$collection/': {
      id: '/collection/$collection/'
      path: '/'
      fullPath: '/collection/$collection/'
      preLoaderRoute: typeof CollectionCollectionIndexLazyRouteImport
      parentRoute: typeof CollectionCollectionRouteRoute
    }
    '/collection/$collection/activity': {
      id: '/collection/$collection/activity'
      path: '/activity'
      fullPath: '/collection/$collection/activity'
      preLoaderRoute: typeof CollectionCollectionActivityLazyRouteImport
      parentRoute: typeof CollectionCollectionRouteRoute
    }
  }
}

interface CollectionCollectionRouteRouteChildren {
  CollectionCollectionActivityLazyRoute: typeof CollectionCollectionActivityLazyRoute
  CollectionCollectionIndexLazyRoute: typeof CollectionCollectionIndexLazyRoute
}

const CollectionCollectionRouteRouteChildren: CollectionCollectionRouteRouteChildren =
  {
    CollectionCollectionActivityLazyRoute:
      CollectionCollectionActivityLazyRoute,
    CollectionCollectionIndexLazyRoute: CollectionCollectionIndexLazyRoute,
  }

const CollectionCollectionRouteRouteWithChildren =
  CollectionCollectionRouteRoute._addFileChildren(
    CollectionCollectionRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CollectionCollectionRouteRoute: CollectionCollectionRouteRouteWithChildren,
  AccountAddressIndexLazyRoute: AccountAddressIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
