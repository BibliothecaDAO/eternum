/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, type World } from "@dojoengine/recs";

export function defineContractComponents(world: World) {
  return {
    AddressName: (() => {
      return defineComponent(
        world,
        { address: RecsType.BigInt, name: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "AddressName",
            types: ["felt252", "felt252"],
            customTypes: [],
          },
        },
      );
    })(),
    Army: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          troops: { knight_count: RecsType.BigInt, paladin_count: RecsType.BigInt, crossbowman_count: RecsType.BigInt },
          battle_id: RecsType.Number,
          battle_side: RecsType.String,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Army",
            types: ["u32", "u64", "u64", "u64", "u32", "enum"],
            customTypes: ["Troops", "BattleSide"],
          },
        },
      );
    })(),
    ArrivalTime: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, arrives_at: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "ArrivalTime",
            types: ["u32", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    Bank: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          owner_fee_num: RecsType.BigInt,
          owner_fee_denom: RecsType.BigInt,
          exists: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Bank",
            types: ["u32", "u128", "u128", "bool"],
            customTypes: [],
          },
        },
      );
    })(),
    BankConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          lords_cost: RecsType.BigInt,
          lp_fee_num: RecsType.BigInt,
          lp_fee_denom: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "BankConfig",
            types: ["u32", "u128", "u128", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    Battle: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          attack_army: {
            troops: {
              knight_count: RecsType.BigInt,
              paladin_count: RecsType.BigInt,
              crossbowman_count: RecsType.BigInt,
            },
            battle_id: RecsType.Number,
            battle_side: RecsType.String,
          },
          attack_army_lifetime: {
            troops: {
              knight_count: RecsType.BigInt,
              paladin_count: RecsType.BigInt,
              crossbowman_count: RecsType.BigInt,
            },
            battle_id: RecsType.Number,
            battle_side: RecsType.String,
          },
          defence_army: {
            troops: {
              knight_count: RecsType.BigInt,
              paladin_count: RecsType.BigInt,
              crossbowman_count: RecsType.BigInt,
            },
            battle_id: RecsType.Number,
            battle_side: RecsType.String,
          },
          defence_army_lifetime: {
            troops: {
              knight_count: RecsType.BigInt,
              paladin_count: RecsType.BigInt,
              crossbowman_count: RecsType.BigInt,
            },
            battle_id: RecsType.Number,
            battle_side: RecsType.String,
          },
          attackers_resources_escrow_id: RecsType.Number,
          defenders_resources_escrow_id: RecsType.Number,
          attack_army_health: { current: RecsType.BigInt, lifetime: RecsType.BigInt },
          defence_army_health: { current: RecsType.BigInt, lifetime: RecsType.BigInt },
          attack_delta: RecsType.BigInt,
          defence_delta: RecsType.BigInt,
          last_updated: RecsType.BigInt,
          duration_left: RecsType.BigInt,
          start_at: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Battle",
            types: [
              "u32",
              "u64",
              "u64",
              "u64",
              "u32",
              "enum",
              "u64",
              "u64",
              "u64",
              "u32",
              "enum",
              "u64",
              "u64",
              "u64",
              "u32",
              "enum",
              "u64",
              "u64",
              "u64",
              "u32",
              "enum",
              "u32",
              "u32",
              "u128",
              "u128",
              "u128",
              "u128",
              "u64",
              "u64",
              "u64",
              "u64",
              "u64",
            ],
            customTypes: [
              "BattleArmy",
              "Troops",
              "BattleSide",
              "BattleArmy",
              "Troops",
              "BattleSide",
              "BattleArmy",
              "Troops",
              "BattleSide",
              "BattleArmy",
              "Troops",
              "BattleSide",
              "BattleHealth",
              "BattleHealth",
            ],
          },
        },
      );
    })(),
    BattleConfig: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, battle_grace_tick_count: RecsType.Number, battle_delay_seconds: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "BattleConfig",
            types: ["u32", "u8", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    Building: (() => {
      return defineComponent(
        world,
        {
          outer_col: RecsType.Number,
          outer_row: RecsType.Number,
          inner_col: RecsType.Number,
          inner_row: RecsType.Number,
          category: RecsType.String,
          produced_resource_type: RecsType.Number,
          bonus_percent: RecsType.Number,
          entity_id: RecsType.Number,
          outer_entity_id: RecsType.Number,
          paused: RecsType.Boolean,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Building",
            types: ["u32", "u32", "u32", "u32", "enum", "u8", "u32", "u32", "u32", "bool"],
            customTypes: ["BuildingCategory"],
          },
        },
      );
    })(),
    BuildingCategoryPopConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          building_category: RecsType.String,
          population: RecsType.Number,
          capacity: RecsType.Number,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "BuildingCategoryPopConfig",
            types: ["u32", "enum", "u32", "u32"],
            customTypes: ["BuildingCategory"],
          },
        },
      );
    })(),
    BuildingConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          category: RecsType.String,
          resource_type: RecsType.Number,
          resource_cost_id: RecsType.Number,
          resource_cost_count: RecsType.Number,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "BuildingConfig",
            types: ["u32", "enum", "u8", "u32", "u32"],
            customTypes: ["BuildingCategory"],
          },
        },
      );
    })(),
    BuildingQuantityv2: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, category: RecsType.String, value: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "BuildingQuantityv2",
            types: ["u32", "enum", "u8"],
            customTypes: ["BuildingCategory"],
          },
        },
      );
    })(),
    CapacityCategory: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, category: RecsType.String },
        {
          metadata: {
            namespace: "eternum",
            name: "CapacityCategory",
            types: ["u32", "enum"],
            customTypes: ["CapacityConfigCategory"],
          },
        },
      );
    })(),
    CapacityConfig: (() => {
      return defineComponent(
        world,
        {
          category: RecsType.String,
          weight_gram: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "CapacityConfig",
            types: ["enum", "u128"],
            customTypes: ["CapacityConfigCategory"],
          },
        },
      );
    })(),
    Contribution: (() => {
      return defineComponent(
        world,
        {
          hyperstructure_entity_id: RecsType.Number,
          player_address: RecsType.BigInt,
          resource_type: RecsType.Number,
          amount: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Contribution",
            types: ["u32", "contractaddress", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    DetachedResource: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          index: RecsType.Number,
          resource_type: RecsType.Number,
          resource_amount: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "DetachedResource",
            types: ["u32", "u32", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    EntityMetadata: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, entity_type: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "EntityMetadata",
            types: ["u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    EntityName: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, name: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "EntityName",
            types: ["u32", "felt252"],
            customTypes: [],
          },
        },
      );
    })(),
    EntityOwner: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, entity_owner_id: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "EntityOwner",
            types: ["u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    ForeignKey: (() => {
      return defineComponent(
        world,
        { foreign_key: RecsType.BigInt, entity_id: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "ForeignKey",
            types: ["felt252", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    Guild: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, is_public: RecsType.Boolean, member_count: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "Guild",
            types: ["u32", "bool", "u16"],
            customTypes: [],
          },
        },
      );
    })(),
    GuildMember: (() => {
      return defineComponent(
        world,
        { address: RecsType.BigInt, guild_entity_id: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "GuildMember",
            types: ["contractaddress", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    GuildWhitelist: (() => {
      return defineComponent(
        world,
        { address: RecsType.BigInt, guild_entity_id: RecsType.Number, is_whitelisted: RecsType.Boolean },
        {
          metadata: {
            namespace: "eternum",
            name: "GuildWhitelist",
            types: ["contractaddress", "u32", "bool"],
            customTypes: [],
          },
        },
      );
    })(),
    HasClaimedStartingResources: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, config_id: RecsType.Number, claimed: RecsType.Boolean },
        {
          metadata: {
            namespace: "eternum",
            name: "HasClaimedStartingResources",
            types: ["u32", "u32", "bool"],
            customTypes: [],
          },
        },
      );
    })(),
    Health: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, current: RecsType.BigInt, lifetime: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Health",
            types: ["u32", "u128", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    HyperstructureConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.Number, time_between_shares_change: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "HyperstructureConfig",
            types: ["u32", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    HyperstructureResourceConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.Number, resource_type: RecsType.Number, amount_for_completion: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "HyperstructureResourceConfig",
            types: ["u32", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    HyperstructureUpdate: (() => {
      return defineComponent(
        world,
        {
          hyperstructure_entity_id: RecsType.Number,
          last_updated_timestamp: RecsType.BigInt,
          last_updated_by: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "HyperstructureUpdate",
            types: ["u32", "u64", "contractaddress"],
            customTypes: [],
          },
        },
      );
    })(),
    Liquidity: (() => {
      return defineComponent(
        world,
        {
          bank_entity_id: RecsType.Number,
          player: RecsType.BigInt,
          resource_type: RecsType.Number,
          shares: { mag: RecsType.BigInt, sign: RecsType.Boolean },
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Liquidity",
            types: ["u32", "contractaddress", "u8", "u128", "bool"],
            customTypes: ["Fixed"],
          },
        },
      );
    })(),
    MapConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          explore_wheat_burn_amount: RecsType.BigInt,
          explore_fish_burn_amount: RecsType.BigInt,
          travel_wheat_burn_amount: RecsType.BigInt,
          travel_fish_burn_amount: RecsType.BigInt,
          reward_resource_amount: RecsType.BigInt,
          shards_mines_fail_probability: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "MapConfig",
            types: ["u32", "u128", "u128", "u128", "u128", "u128", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    Market: (() => {
      return defineComponent(
        world,
        {
          bank_entity_id: RecsType.Number,
          resource_type: RecsType.Number,
          lords_amount: RecsType.BigInt,
          resource_amount: RecsType.BigInt,
          total_shares: { mag: RecsType.BigInt, sign: RecsType.Boolean },
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Market",
            types: ["u32", "u8", "u128", "u128", "u128", "bool"],
            customTypes: ["Fixed"],
          },
        },
      );
    })(),
    MercenariesConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          troops: { knight_count: RecsType.BigInt, paladin_count: RecsType.BigInt, crossbowman_count: RecsType.BigInt },
          rewards: RecsType.StringArray,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "MercenariesConfig",
            types: ["u32", "u64", "u64", "u64"],
            customTypes: ["Troops"],
          },
        },
      );
    })(),
    Message: (() => {
      return defineComponent(
        world,
        {
          identity: RecsType.BigInt,
          channel: RecsType.BigInt,
          content: RecsType.String,
          salt: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Message",
            types: ["felt252", "felt252", "BytesArray", "felt252"],
            customTypes: [],
          },
        },
      );
    })(),
    Movable: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          sec_per_km: RecsType.Number,
          blocked: RecsType.Boolean,
          round_trip: RecsType.Boolean,
          start_coord_x: RecsType.Number,
          start_coord_y: RecsType.Number,
          intermediate_coord_x: RecsType.Number,
          intermediate_coord_y: RecsType.Number,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Movable",
            types: ["u32", "u16", "bool", "bool", "u32", "u32", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    Orders: (() => {
      return defineComponent(
        world,
        { order_id: RecsType.Number, hyperstructure_count: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "Orders",
            types: ["u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    OwnedResourcesTracker: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, resource_types: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "OwnedResourcesTracker",
            types: ["u32", "u256"],
            customTypes: [],
          },
        },
      );
    })(),
    Owner: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, address: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Owner",
            types: ["u32", "contractaddress"],
            customTypes: [],
          },
        },
      );
    })(),
    Population: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, population: RecsType.Number, capacity: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "Population",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    PopulationConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.Number, base_population: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "PopulationConfig",
            types: ["u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    Position: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, x: RecsType.Number, y: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "Position",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    ProductionDeadline: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, deadline_tick: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "ProductionDeadline",
            types: ["u32", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    Production: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          resource_type: RecsType.Number,
          building_count: RecsType.Number,
          production_rate: RecsType.BigInt,
          consumption_rate: RecsType.BigInt,
          last_updated_tick: RecsType.BigInt,
          input_finish_tick: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Production",
            types: ["u32", "u8", "u8", "u128", "u128", "u64", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    ProductionConfig: (() => {
      return defineComponent(
        world,
        {
          resource_type: RecsType.Number,
          amount: RecsType.BigInt,
          input_count: RecsType.BigInt,
          output_count: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "ProductionConfig",
            types: ["u8", "u128", "u128", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    ProductionInput: (() => {
      return defineComponent(
        world,
        {
          output_resource_type: RecsType.Number,
          index: RecsType.Number,
          input_resource_type: RecsType.Number,
          input_resource_amount: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "ProductionInput",
            types: ["u8", "u8", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    ProductionOutput: (() => {
      return defineComponent(
        world,
        { input_resource_type: RecsType.Number, index: RecsType.Number, output_resource_type: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "ProductionOutput",
            types: ["u8", "u8", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    Progress: (() => {
      return defineComponent(
        world,
        { hyperstructure_entity_id: RecsType.Number, resource_type: RecsType.Number, amount: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Progress",
            types: ["u32", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    Protectee: (() => {
      return defineComponent(
        world,
        { army_id: RecsType.Number, protectee_id: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "Protectee",
            types: ["u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    Protector: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, army_id: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "Protector",
            types: ["u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    Quantity: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, value: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Quantity",
            types: ["u32", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    QuantityTracker: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.BigInt, count: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "QuantityTracker",
            types: ["felt252", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    Realm: (() => {
      return defineComponent(
        world,
        {
          entity_id: RecsType.Number,
          realm_id: RecsType.Number,
          resource_types_packed: RecsType.BigInt,
          resource_types_count: RecsType.Number,
          cities: RecsType.Number,
          harbors: RecsType.Number,
          rivers: RecsType.Number,
          regions: RecsType.Number,
          wonder: RecsType.Number,
          order: RecsType.Number,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Realm",
            types: ["u32", "u32", "u128", "u8", "u8", "u8", "u8", "u8", "u8", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    RealmFreeMintConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.Number, detached_resource_id: RecsType.Number, detached_resource_count: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "RealmFreeMintConfig",
            types: ["u32", "u32", "u32"],
            customTypes: [],
          },
        },
      );
    })(),
    Resource: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, resource_type: RecsType.Number, balance: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Resource",
            types: ["u32", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    ResourceAllowance: (() => {
      return defineComponent(
        world,
        {
          owner_entity_id: RecsType.Number,
          approved_entity_id: RecsType.Number,
          resource_type: RecsType.Number,
          amount: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "ResourceAllowance",
            types: ["u32", "u32", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    ResourceCost: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, index: RecsType.Number, resource_type: RecsType.Number, amount: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "ResourceCost",
            types: ["u32", "u32", "u8", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    ResourceTransferLock: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, release_at: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "ResourceTransferLock",
            types: ["u32", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    SpeedConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          speed_config_id: RecsType.Number,
          entity_type: RecsType.Number,
          sec_per_km: RecsType.Number,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "SpeedConfig",
            types: ["u32", "u32", "u32", "u16"],
            customTypes: [],
          },
        },
      );
    })(),
    Stamina: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, amount: RecsType.Number, last_refill_tick: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Stamina",
            types: ["u32", "u16", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    StaminaConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.Number, unit_type: RecsType.Number, max_stamina: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "StaminaConfig",
            types: ["u32", "u8", "u16"],
            customTypes: [],
          },
        },
      );
    })(),
    StaminaRefillConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.Number, amount_per_tick: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "StaminaRefillConfig",
            types: ["u32", "u16"],
            customTypes: [],
          },
        },
      );
    })(),
    Status: (() => {
      return defineComponent(
        world,
        { trade_id: RecsType.Number, value: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Status",
            types: ["u32", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    Structure: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, category: RecsType.String, created_at: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Structure",
            types: ["u32", "enum", "u64"],
            customTypes: ["StructureCategory"],
          },
        },
      );
    })(),
    StructureCount: (() => {
      return defineComponent(
        world,
        { coord: { x: RecsType.Number, y: RecsType.Number }, count: RecsType.Number },
        {
          metadata: {
            namespace: "eternum",
            name: "StructureCount",
            types: ["u32", "u32", "u8"],
            customTypes: ["Coord"],
          },
        },
      );
    })(),
    TickConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.Number, tick_id: RecsType.Number, tick_interval_in_seconds: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "TickConfig",
            types: ["u32", "u8", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    Tile: (() => {
      return defineComponent(
        world,
        {
          col: RecsType.Number,
          row: RecsType.Number,
          explored_by_id: RecsType.Number,
          explored_at: RecsType.BigInt,
          biome: RecsType.String,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Tile",
            types: ["u32", "u32", "u32", "u64", "enum"],
            customTypes: ["Biome"],
          },
        },
      );
    })(),
    Trade: (() => {
      return defineComponent(
        world,
        {
          trade_id: RecsType.Number,
          maker_id: RecsType.Number,
          maker_gives_resources_origin_id: RecsType.Number,
          maker_gives_resources_id: RecsType.Number,
          maker_gives_resources_hash: RecsType.BigInt,
          maker_gives_resources_weight: RecsType.BigInt,
          taker_id: RecsType.Number,
          taker_gives_resources_origin_id: RecsType.Number,
          taker_gives_resources_id: RecsType.Number,
          taker_gives_resources_hash: RecsType.BigInt,
          taker_gives_resources_weight: RecsType.BigInt,
          expires_at: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "Trade",
            types: ["u32", "u32", "u32", "u32", "felt252", "u128", "u32", "u32", "u32", "felt252", "u128", "u64"],
            customTypes: [],
          },
        },
      );
    })(),
    TroopConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          health: RecsType.Number,
          knight_strength: RecsType.Number,
          paladin_strength: RecsType.Number,
          crossbowman_strength: RecsType.Number,
          advantage_percent: RecsType.Number,
          disadvantage_percent: RecsType.Number,
          pillage_health_divisor: RecsType.Number,
          army_free_per_structure: RecsType.Number,
          army_extra_per_building: RecsType.Number,
          battle_leave_slash_num: RecsType.Number,
          battle_leave_slash_denom: RecsType.Number,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "TroopConfig",
            types: ["u32", "u32", "u8", "u8", "u16", "u16", "u16", "u8", "u8", "u8", "u8", "u8"],
            customTypes: [],
          },
        },
      );
    })(),
    Weight: (() => {
      return defineComponent(
        world,
        { entity_id: RecsType.Number, value: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "Weight",
            types: ["u32", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    WeightConfig: (() => {
      return defineComponent(
        world,
        {
          config_id: RecsType.Number,
          weight_config_id: RecsType.Number,
          entity_type: RecsType.Number,
          weight_gram: RecsType.BigInt,
        },
        {
          metadata: {
            namespace: "eternum",
            name: "WeightConfig",
            types: ["u32", "u32", "u32", "u128"],
            customTypes: [],
          },
        },
      );
    })(),
    WorldConfig: (() => {
      return defineComponent(
        world,
        { config_id: RecsType.Number, admin_address: RecsType.BigInt, realm_l2_contract: RecsType.BigInt },
        {
          metadata: {
            namespace: "eternum",
            name: "WorldConfig",
            types: ["u32", "contractaddress", "contractaddress"],
            customTypes: [],
          },
        },
      );
    })(),
    ...eventsComponents(world),
  };
}

const eventsComponents = (world: World) => {
  return {
    events: {
      BattleStartData: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            event_id: RecsType.String,
            battle_entity_id: RecsType.Number,
            attacker: RecsType.BigInt,
            attacker_name: RecsType.BigInt,
            attacker_army_entity_id: RecsType.Number,
            defender_name: RecsType.BigInt,
            defender: RecsType.BigInt,
            defender_army_entity_id: RecsType.Number,
            duration_left: RecsType.Number,
            x: RecsType.Number,
            y: RecsType.Number,
            structure_type: RecsType.String,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "BattleStartData",
              types: [
                "u32",
                "EventType",
                "u32",
                "ContractAddress",
                "felt252",
                "u32",
                "felt252",
                "ContractAddress",
                "u32",
                "u64",
                "u32",
                "u32",
                "StructureCategory",
                "u64",
              ],
              customTypes: [],
            },
          },
        );
      })(),

      BattleJoinData: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            event_id: RecsType.String,
            battle_entity_id: RecsType.Number,
            joiner: RecsType.BigInt,
            joiner_name: RecsType.BigInt,
            joiner_army_entity_id: RecsType.Number,
            joiner_side: RecsType.String,
            duration_left: RecsType.Number,
            x: RecsType.Number,
            y: RecsType.Number,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "BattleJoinData",
              types: [
                "u32",
                "EventType",
                "u32",
                "ContractAddress",
                "felt252",
                "u32",
                "BattleSide",
                "u64",
                "u32",
                "u32",
                "u64",
              ],
              customTypes: [],
            },
          },
        );
      })(),

      BattleLeaveData: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            event_id: RecsType.String,
            battle_entity_id: RecsType.Number,
            leaver: RecsType.BigInt,
            leaver_name: RecsType.BigInt,
            leaver_army_entity_id: RecsType.Number,
            leaver_side: RecsType.String,
            duration_left: RecsType.Number,
            x: RecsType.Number,
            y: RecsType.Number,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "BattleLeaveData",
              types: [
                "u32",
                "EventType",
                "u32",
                "ContractAddress",
                "felt252",
                "u32",
                "BattleSide",
                "u64",
                "u32",
                "u32",
                "u64",
              ],
              customTypes: [],
            },
          },
        );
      })(),

      BattleClaimData: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            event_id: RecsType.String,
            structure_entity_id: RecsType.Number,
            claimer: RecsType.BigInt,
            claimer_name: RecsType.BigInt,
            claimer_army_entity_id: RecsType.Number,
            previous_owner: RecsType.BigInt,
            x: RecsType.Number,
            y: RecsType.Number,
            structure_type: RecsType.String,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "BattleClaimData",
              types: [
                "u32",
                "EventType",
                "u32",
                "ContractAddress",
                "felt252",
                "u32",
                "ContractAddress",
                "u32",
                "u32",
                "StructureCategory",
                "u64",
              ],
              customTypes: [],
            },
          },
        );
      })(),

      BattlePillageData: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            event_id: RecsType.String,
            pillager: RecsType.BigInt,
            pillager_name: RecsType.BigInt,
            pillager_realm_entity_id: RecsType.Number,
            pillager_army_entity_id: RecsType.Number,
            pillaged_structure_owner: RecsType.BigInt,
            pillaged_structure_entity_id: RecsType.Number,
            winner: RecsType.String,
            x: RecsType.Number,
            y: RecsType.Number,
            structure_type: RecsType.String,
            pillaged_resources: RecsType.StringArray,
            destroyed_building_category: RecsType.String,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "BattlePillageData",
              types: [
                "u32",
                "EventType",
                "ContractAddress",
                "felt252",
                "u32",
                "u32",
                "ContractAddress",
                "u32",
                "BattleSide",
                "u32",
                "u32",
                "StructureCategory",
                "array",
                "enum",
                "u64",
              ],
              customTypes: ["BuildingCategory"],
            },
          },
        );
      })(),

      SwapEvent: (() => {
        return defineComponent(
          world,
          {
            bank_entity_id: RecsType.Number,
            entity_id: RecsType.Number,
            id: RecsType.Number,
            resource_type: RecsType.Number,
            lords_amount: RecsType.BigInt,
            resource_amount: RecsType.BigInt,
            bank_owner_fees: RecsType.BigInt,
            lp_fees: RecsType.BigInt,
            resource_price: RecsType.BigInt,
            buy: RecsType.Boolean,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "SwapEvent",
              types: ["u32", "u32", "u32", "u8", "u128", "u128", "u128", "u128", "u128", "bool", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      AcceptOrder: (() => {
        return defineComponent(
          world,
          {
            taker_id: RecsType.Number,
            maker_id: RecsType.Number,
            id: RecsType.Number,
            trade_id: RecsType.Number,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "AcceptOrder",
              types: ["u32", "u32", "u32", "u32", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      MapExplored: (() => {
        return defineComponent(
          world,
          {
            entity_id: RecsType.Number,
            col: RecsType.Number,
            row: RecsType.Number,
            id: RecsType.Number,
            entity_owner_id: RecsType.Number,
            biome: RecsType.String,
            reward: RecsType.StringArray,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "MapExplored",
              types: ["u32", "u32", "u32", "u32", "u32", "Biome", "array", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      HyperstructureFinished: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            hyperstructure_entity_id: RecsType.Number,
            contributor_entity_id: RecsType.Number,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "HyperstructureFinished",
              types: ["u32", "u32", "u32", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      HyperstructureCoOwnersChange: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            hyperstructure_entity_id: RecsType.Number,
            co_owners: RecsType.StringArray,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "HyperstructureCoOwnersChange",
              types: ["u32", "u32", "array", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      HyperstructureContribution: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            hyperstructure_entity_id: RecsType.Number,
            contributor_entity_id: RecsType.Number,
            contributions: RecsType.StringArray,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "HyperstructureContribution",
              types: ["u32", "u32", "u32", "array", "u64"],
              customTypes: [],
            },
          },
        );
      })(),

      SettleRealmData: (() => {
        return defineComponent(
          world,
          {
            id: RecsType.Number,
            event_id: RecsType.String,
            entity_id: RecsType.Number,
            owner_name: RecsType.BigInt,
            realm_name: RecsType.BigInt,
            resource_types_packed: RecsType.BigInt,
            resource_types_count: RecsType.Number,
            cities: RecsType.Number,
            harbors: RecsType.Number,
            rivers: RecsType.Number,
            regions: RecsType.Number,
            wonder: RecsType.Number,
            order: RecsType.Number,
            x: RecsType.Number,
            y: RecsType.Number,
            timestamp: RecsType.Number,
          },
          {
            metadata: {
              namespace: "eternum",
              name: "SettleRealmData",
              types: [
                "u32",
                "EventType",
                "u32",
                "felt252",
                "felt252",
                "u128",
                "u8",
                "u8",
                "u8",
                "u8",
                "u8",
                "u8",
                "u8",
                "u32",
                "u32",
                "u64",
              ],
              customTypes: [],
            },
          },
        );
      })(),
    },
  };
};
