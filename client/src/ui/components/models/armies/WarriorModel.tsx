/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 --types --keepnames --keepgroups --keepmeshes --transform --precision 6 client/public/models/Warrior.gltf 
Files: client/public/models/Warrior.gltf [3.04MB] > /Users/aymericdelabrousse/Projects/blockchain/cairo/realms/official-eternum/eternum/Warrior-transformed.glb [378.16KB] (88%)
*/

import * as THREE from "three";
import React, { useCallback, useEffect, useMemo, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { Vector3, useGraph } from "@react-three/fiber";
import { useRunningSound } from "../../../../hooks/useUISound";

type GLTFResult = GLTF & {
  nodes: {
    Face: THREE.Mesh;
    ShoulderPadL: THREE.Mesh;
    Warrior_Sword: THREE.Mesh;
    ShoulderPadR: THREE.Mesh;
    Warrior_Body: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    Warrior_Sword_Texture: THREE.MeshBasicMaterial;
    Warrior_Texture: THREE.MeshBasicMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "Death"
  | "Idle"
  | "Idle_Attacking"
  | "Idle_Weapon"
  | "PickUp"
  | "Punch"
  | "RecieveHit"
  | "Roll"
  | "Run"
  | "Run_Weapon"
  | "Sword_Attack"
  | "Sword_Attack2"
  | "Walk";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["mesh"] | JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

type WarriorModelProps = {
  id: number;
  position?: Vector3;
  rotationY: number;
  onContextMenu: (e: any) => void;
  isRunning: boolean;
  isFriendly: boolean;
};

export function WarriorModel({
  id,
  position,
  rotationY,
  onContextMenu,
  isRunning,
  isFriendly,
  ...props
}: WarriorModelProps) {
  const groupRef = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("/models/warrior.glb") as GLTFResult;
  const { actions } = useAnimations(animations, groupRef);
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { play: playRunningSoud, stop: stopRunningSound } = useRunningSound();

  // add actions to onClick
  const onClickAction = useCallback((e: any) => {
    e.stopPropagation();
    if (isFriendly) {
      const action = actions["Sword_Attack"];
      if (action) {
        action.reset();
        action.setLoop(THREE.LoopOnce, 1);
        action.clampWhenFinished = true;
        action.play();
      }
    }
  }, []);

  useEffect(() => {
    const runAction = actions["Run"];
    const idleAction = actions["Idle_Attacking"];
    if (isRunning) {
      runAction?.play();
      playRunningSoud();
      idleAction?.stop();
    } else {
      runAction?.stop();
      stopRunningSound();
      idleAction?.play();
    }
  }, [isRunning, actions]);

  const part1Height = 0.4; // 1/3 of the total height
  const part2Height = 0.33; // 1/3 of the total height
  const part3Height = 0.34; // 1/3 of the total height

  const part1TopRadius = 0.5;
  const part1BottomRadius = 0.6;
  const part2TopRadius = part1TopRadius;
  const part2BottomRadius = 0.5;
  const part3TopRadius = 0.4;
  const part3BottomRadius = part2TopRadius;

  const part1Color = "red";
  const part2Color = "green";
  const part3Color = "blue";

  return (
    <group {...props} ref={groupRef} onClick={onClickAction} onContextMenu={onContextMenu}>
      <mesh position={[0, part1Height / 2, 0]}>
        <cylinderGeometry args={[part1TopRadius, part1BottomRadius, part1Height, 10]} />
        <meshStandardMaterial color={"#582C4D"} />
      </mesh>
      <mesh position={[0, part1Height + part2Height / 2, 0]}>
        <cylinderGeometry args={[part2TopRadius, part2BottomRadius, part2Height, 10]} />
        <meshStandardMaterial color={"#6B7FD7"} />
      </mesh>
      <mesh position={[0, part1Height + part2Height + part3Height / 2, 0]}>
        <cylinderGeometry args={[part3TopRadius, part3BottomRadius, part3Height, 10]} />
        <meshStandardMaterial color={"#F24236"} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/models/warrior.glb");
