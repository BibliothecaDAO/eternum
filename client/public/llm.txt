file: docs/pages/index.mdx
meta: {
  "layout": "landing"
}

import { HomePage } from "vocs/components";

<HomePage.Root>
  <div
    style={{
  position: "absolute",
  inset: 0,
  zIndex: -10
}}
  >
    <img
      src={`/images/covers/0${Math.floor(Math.random() * 8) + 1}.png`}
      alt="Eternum Cover"
      style={{
      width: "100%",
      height: "100%",
      objectFit: "cover"
    }}
    />
  </div>

  {" "}

  <img src="/images/logos/eternum_words_logo.svg" alt="Eternum Logo" />

  <HomePage.Description>
    Eternum is a decentralized, open-source, and community-driven 4x MMO game built on the Dojo framework.
  </HomePage.Description>

  <HomePage.Buttons>
    <HomePage.Button href="/overview/introduction" variant="primary">
      Get started
    </HomePage.Button>

    <HomePage.Button href="https://eternum.realms.world" variant="outline">
      Play Now
    </HomePage.Button>
  </HomePage.Buttons>
</HomePage.Root>

\n\n---\n\nfile: docs/pages/development/client.mdx
meta: {}

# React Client

## Run the dev server

From the root of the project, run:

Easy method:

```bash
./scripts/client.sh
```

Manual method:

```bash
pnpm i && pnpm dev
```

The client requires environment variables to be set. See the [Environment Variables](client/.env.sample) page for more
information.

## Project Structure

### Elements

* Small reusable react UI components

### Components

* Stateful react components composed of Elements. This is where all the onchain state should be stored.

### Modules

* Collection of components composed into Modules

### Containers

* Locations where Modules are composed into a full page

### Layouts

* Collection of containers composed into a full layout

## useDojo Hook

The `useDojo` hook is a core part of the Dojo framework that provides access to essential game functionality, account
management, and network interactions.

### Usage

```tsx
import { useDojo } from "@/hooks/context/dojo-context";
function GameComponent() {
  const { account, network, masterAccount } = useDojo();
  // ... your game logic
}
```

### Features

#### Account Management

The hook provides comprehensive wallet and account management capabilities:

* **Burner Wallet Creation**: Create temporary wallets for players
* **Account Selection**: Switch between different burner wallets
* **Account Listing**: View all available burner wallets
* **Master Account Access**: Access to the game's master account
* **Deployment Status**: Track wallet deployment status

#### Network Integration

Access to network configuration and setup results for interacting with the Starknet blockchain.

#### Game Setup

Provides access to all initialized game systems, components, and world configurations.

### Requirements

The hook must be used within a `DojoProvider` component and requires the following environment variables:

* `VITE_PUBLIC_MASTER_ADDRESS`
* `VITE_PUBLIC_MASTER_PRIVATE_KEY`
* `VITE_PUBLIC_ACCOUNT_CLASS_HASH`

### Return Value

The hook returns an object containing:

* `setup`: Complete Dojo context including game systems and components
* `account`: Account management functions and state
* `network`: Network configuration and setup results
* `masterAccount`: The master account instance

### Example

```tsx
function GameUI() {
  const { account } = useDojo();
  return (
    <div>
      <p>Current Account: {account.account.address}</p>
    </div>
  );
}
```

## Eternum provider

Wrapper around the DojoProvider, which itself is a wrapper around a generic Starknet provider, an API to easy interact
with your contract’s API via the RPC. Each layer of abstraction adds its own set of functionalities, with the Eternum
Provider mainly providing easy access to all the system calls that our systems expose (create\_army, etc…)

## Offchain messages

You can use offchain messages to store information in the indexer, but it is not persisted onchain. Some examples of use
cases for this are in-game messages. Refer to
[this code](https://github.com/BibliothecaDAO/eternum/blob/1490dfcf513d72f51e5a84138be743d774338caf/client/src/ui/modules/chat/InputField.tsx#L50)
for an example of how to use offchain messages

# State Management with Recs

Recs allow you to query the state of the world and subscribe to changes in the world. It is the recommended way to
manage state in the client.

```tsx
const structureAtPosition = runQuery([HasValue(Position, { x, y }), Has(Structure)]);
```

This line of code will run a query against the local state of the browser and return all the structures that are at the
position `{ x, y }`. This does not execute any call to Torii as the local state is already synced with the latest
updates.

This part of the code in `client/src/dojo/setup.ts` is where the local state is initialized and synced.

## Subscribing to changes

To subscribe to changes in the world, you can use the `useEntityQuery` hook. This hook will return the entity that
matches the query and update it if it changes.

```tsx
const allRealms = useEntityQuery([Has(Realm)]);
```

## Getting the value of your components

After you have run a query, you can get the value of your components using the `getComponentValue` function.

```tsx
const realm = getComponentValue(Realm, entityId);
```

The entityId is the poseidon hash of all the keys of the component you want to get. This can be an easier way to get
your component than using a query if you already know all the keys.

### Getting a component from an entity

If you have an entityId, you can get a component from it using the `getComponent` function.

```tsx
const realm = getComponentValue(Realm, getEntityIdFromKeys([entityId]));
```

The previous line of code is equivalent to:

```tsx
const entity = runQuery([Has(Realm), HasValue(Keys, [entityId])]);
const realm = getComponentValue(Realm, Array.from(entity)[0]);
```

# Extending the client

## Adding a new component

You will need to add your component to the `contractComponents.ts` file. This will ensure that the component is synced
with the state of the world and will provide the types for the component.

## Adding a new system

You will need to add your system logic to the `sdk/packages/eternum/src/provider/index.ts` file and then use it in the
`createSystemCalls.ts` file. This will ensure that the system is called with the correct arguments and will provide the
types for the system.

## Optimistic updates

You can use optimistic updates to update the local state without waiting for the transaction to be included in a block.
This is useful to provide a better user experience by updating the UI immediately.

```ts
private _optimisticDestroy = (entityId: ID, col: number, row: number) => {
	const overrideId = uuid();
	const realmPosition = getComponentValue(this.setup.components.Position, getEntityIdFromKeys([BigInt(entityId)]));
	const { x: outercol, y: outerrow } = realmPosition || { x: 0, y: 0 };
	const entity = getEntityIdFromKeys([outercol, outerrow, col, row].map((v) => BigInt(v)));
	this.setup.components.Building.addOverride(overrideId, {
		entity,
		value: {
		outer_col: outercol,
		outer_row: outerrow,
		inner_col: col,
		inner_row: row,
		category: "None",
		produced_resource_type: 0,
		bonus_percent: 0,
		entity_id: 0,
		outer_entity_id: 0,
		},
	});
	return overrideId;
};
```

You can use the `uuid` function to generate a unique overrideId. Remember to return the overrideId so you can later
delete it after the transaction is included in a block. It's good practice to remove the override, however because of a
delay between the transaction being included in a block and Torii syncing, you might have a split second where the
override is removed and the Recs being updated. This will cause your component (i.e. a building) to appear then
disappear for a second before reappearing.

\n\n---\n\nfile: docs/pages/development/collaborators.mdx
meta: {}

import Collaborators from "@/components/Collaborators";

# Collaborators

<Collaborators />

\n\n---\n\nfile: docs/pages/development/contracts.mdx
meta: {}

# Contracts

## Rules of thumb

* Note that every field you add in a model will raise the storage cost of each transaction that modifies the model.
* Try to make models as small as possible, and re-use existing models as much as possible, every model and system that
  you add raises the size of the CASM, and there is a limit to the size of a declared contract on Starknet.
* Keep systems stateless. Store your game state in models.
* When implementing a new game logic, you will need to keep in mind that the game already has physics implemented, such
  as weight, position, movement, speed, etc. If creating something that needs to have any of this logic, re-use
  components so everything stays logical.

## Models

### Keys

Use the `ID` type alias for keys that require a unique identifier.

### Model design

entity\_id: u32

### Implementations

Where possible make traits for the models so they are stateless for unit testing.

Always use generate trait where possible to minimise code.

```rust
#[generate_trait]
```

### Adding a model

```rust
#[derive(Copy, Drop, Serde)]
#[dojo::model]
pub struct Structure {
    #[key]
    entity_id: ID,
    category: StructureCategory,
    created_at: u64
}
```

To test this model, you need to add it to the `contracts/src/utils/testing/world.cairo` file so it can be instantiated
in the tests.

## Event models

If you need some data to be available in the client, but it doesn't need to be stored onchain, you can use an event
model.

```rust
#[derive(Introspect, Copy, Drop, Serde)]
#[dojo::event]
#[dojo::model]
pub struct ExampleEvent {
    #[key]
    id: ID,
    #[key]
    event_id: EventType,
	my_data_field: u8
}
```

## Adding a system

Design systems like this in the directory

* SystemName
  * system\_name.cairo
  * tests.cairo

`system.cairo` should include the implementation of the system like this.

Things to note:

* Interface at top of File
* use of `super::IBuildingContract` to minimise imports and make it clear where the interface is defined.

```rust
#[dojo::interface]
trait IBuildingContract<TContractState> {
    fn create(
        entity_id: ID,
        building_coord: s1_eternum::models::position::Coord,
        building_category: s1_eternum::models::resource::production::building::BuildingCategory,
        produce_resource_type: Option<u8>
    );
}

#[dojo::contract]
mod production_systems {
    use s1_eternum::alias::ID;
    use s1_eternum::models::{
        resource::resource::{Resource, ResourceCost}, owner::Owner, hyperstructure::HyperStructure,
        order::Orders, position::{Coord, Position, PositionTrait, Direction},
        buildings::{BuildingCategory, Building, BuildingImpl},
        production::{Production, ProductionRateTrait}, realm::{Realm, RealmImpl}
    };

    #[abi(embed_v0)]
    impl BuildingContractImpl of super::IBuildingContract<ContractState> {
        fn create(
            world: IWorldDispatcher,
            entity_id: ID,
            building_coord: Coord,
            building_category: BuildingCategory,
            produce_resource_type: Option<u8>,
        ) {
        }
    }
}
```

To test this system, you need to add it to the `contracts/src/utils/testing/world.cairo` file so it can be instantiated
in the tests.

\n\n---\n\nfile: docs/pages/development/getting-started.mdx
meta: {
  "layout": "docs"
}

# Getting Started

<img src="/images/covers/eternum-documentation.png" alt="Eternum Development" className="w-full rounded-lg my-6" />

## Prerequisites

* [Dojo onchain game engine](https://book.dojoengine.org) v1.0.4
* [Node.js](https://nodejs.org/)
* [pnpm](https://pnpm.io/) v9.12.3
* [Bun](https://bun.sh/)

## Setup

Install Dojo via:

```bash
curl -L https://install.dojoengine.org | bash
```

Eternum uses a pnpm workspace and bun for scripts to allow easy npm packages to be created. Install pnpm:

```bash
npm install -g pnpm
```

Install project dependencies:

```bash
pnpm install
```

Build shared packages:

```bash
pnpm run build:packages
```

## Development Scripts

### Development

* `pnpm dev` - Start game development server
* `pnpm dev:docs` - Start documentation development server
* `pnpm dev:landing` - Start landing page development server

### Building

* `pnpm build` - Build game client
* `pnpm build:docs` - Build documentation
* `pnpm build:landing` - Build landing page
* `pnpm build:packages` - Build shared packages

### Testing & Linting

* `pnpm test` - Run all tests
* `pnpm lint` - Run linting
* `pnpm format` - Format code
* `pnpm format:check` - Check code formatting

## Contract Deployment

Eternum supports multiple deployment environments:

| Environment | Description                 |
| ----------- | --------------------------- |
| Local       | For development and testing |
| Slot        | Staging environment         |
| Sepolia     | Public testnet              |
| Mainnet     | Production environment      |

### Deploying to Local

Before deploying to any environment, confirm that you have a `.env.{environment}` file in the `contracts/common`
directory, as well as in the `client/apps/game` directory.

To deploy and run the game locally:

```bash
# Start local game contracts
pnpm run contract:start:local
```

### Deploying to Sepolia

To deploy the contracts to Sepolia testnet, run these commands in order:

1. Deploy game contracts:

```bash
pnpm run game:migrate:sepolia
```

2. Deploy season pass contracts:

```bash
pnpm run seasonpass:deploy:sepolia
```

3. Deploy season resources contracts:

```bash
pnpm run seasonresources:deploy:sepolia
```

4. Update TOML configuration:

```bash
pnpm run toml:update:sepolia
```

5. Start the indexer:

```bash
pnpm run indexer:start:sepolia
```

6. Deploy game configuration:

```bash
pnpm run config:deploy:sepolia
```

## Environment Variables

For local development, create a file called `.env.local` in the client repository and add the following:

```bash
VITE_PUBLIC_MASTER_ADDRESS="0x127fd5f1fe78a71f8bcd1fec63e3fe2f0486b6ecd5c86a0466c3a21fa5cfcec"
VITE_PUBLIC_MASTER_PRIVATE_KEY="0xc5b2fcab997346f3ea1c00b002ecf6f382c5f9c9659a3894eb783c5320f912"
VITE_PUBLIC_ACCOUNT_CLASS_HASH="0x07dc7899aa655b0aae51eadff6d801a58e97dd99cf4666ee59e704249e51adf2"
VITE_PUBLIC_FEE_TOKEN_ADDRESS=0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7

VITE_PUBLIC_TORII="http://127.0.0.1:8080"
VITE_PUBLIC_NODE_URL="http://127.0.0.1:5050"
VITE_PUBLIC_GAME_VERSION="v1.0.0-rc0"
VITE_PUBLIC_GRAPHICS_DEV=false
VITE_PUBLIC_TORII_RELAY="/ip4/127.0.0.1/udp/9091/webrtc-direct/certhash/uEiDry6d-bDv3UdIS6L9VMugoiZnfwqOeXyFWm6jgKf7aTw"

VITE_SOCIAL_LINK=http://bit.ly/3Zz1mpp

VITE_PUBLIC_CHAIN=local
VITE_PUBLIC_SLOT="eternum-prod"

VITE_PUBLIC_VRF_PROVIDER_ADDRESS="0x0"
VITE_PUBLIC_CLIENT_FEE_RECIPIENT=0x045c587318c9ebcf2fbe21febf288ee2e3597a21cd48676005a5770a50d433c5
VITE_PUBLIC_MOBILE_VERSION_URL=https://next-eternum-mobile.realms.world

```

This file is subject to change, please keep an eye on the repository for potential updates.

## Project Structure

* [Client](https://github.com/BibliothecaDAO/eternum/tree/main/client) - React apps built with Vite
  * [Game](https://github.com/BibliothecaDAO/eternum/tree/main/client/apps/game) - Main game client with Three.js
    interface
  * [Landing](https://github.com/BibliothecaDAO/eternum/tree/main/client/apps/landing) - Landing page
  * [Game Docs](https://github.com/BibliothecaDAO/eternum/tree/main/client/apps/game-docs) - Game documentation
  * [Balancing](https://github.com/BibliothecaDAO/eternum/tree/main/client/apps/balancing) - Game balancing tools
* [Contracts](https://github.com/BibliothecaDAO/eternum/tree/main/contracts) - Cairo/Dojo smart contracts
  * Game contracts
  * Season Pass contracts
  * Season Resources contracts
* [Packages](https://github.com/BibliothecaDAO/eternum/tree/main/packages) - Shared libraries
  * [Core](https://github.com/BibliothecaDAO/eternum/tree/main/packages/core) - Eternum SDK
  * [React](https://github.com/BibliothecaDAO/eternum/tree/main/packages/react) - React hooks and components
* [Config](https://github.com/BibliothecaDAO/eternum/tree/main/config) - Configuration and deployment scripts

## Core Dependencies

* [@dojoengine/react](https://www.npmjs.com/package/@dojoengine/react) - React integration for Dojo
* [@dojoengine/recs](https://www.npmjs.com/package/@dojoengine/recs) - Entity Component System
* [@cartridge/controller](https://www.npmjs.com/package/@cartridge/controller) - Game controller integration
* [Starknet.js](https://www.npmjs.com/package/starknet) v6.23.1 - StarkNet interaction
* [Vite](https://vitejs.dev/) - Frontend build tool

## Stack

<img src="/images/covers/08.png" alt="Eternum Technology Stack" className="w-full rounded-lg my-6" />

* [Contracts](/development/contracts): built using the Dojo framework. This leverages the ECS model, allowing us to
  build quick and ship fast. It revolves around 3 units: Entities, Components (called Models in Dojo) and Systems (more
  about this in the Dojo book).
* [Client](/development/client): our client is built using React with Typescript. We leverage Dojo by using DojoJS
* [Eternum SDK](/development/sdk): our SDK contains most notably the getter and setter of the configuration of Eternum,
  the EternumProvider and most of the constants/types of the world that needed to be transcribed to Typescript.
* [Torii](https://book.dojoengine.org/toolchain/torii): Dojo's indexer, optimized for that particular framework and well
  integrated into the stack. From our client, we have a gRPC subscription set up through DojoJS and recs to events.
  Events are fired in the contracts as a way for the indexer to know what's going on in the world. Every time an entity
  is created, updated, or deleted, an event is fired which updated Torii's record of the world.
* [DojoJS and recs](https://github.com/dojoengine/dojo.js?tab=readme-ov-file#contributing-to-dojojs): DojoJS is the SDK
  that allows easy integration of a Dojo app into your client/node backend. Recs are DojoJS's way of exposing the state
  of the world to the client. This is done via queries to the Recs state using a simple query language, which doesn't
  support complex queries yet (e.g. joins, gt, lt, etc...).

\n\n---\n\nfile: docs/pages/development/index.mdx
meta: {
  "layout": "docs"
}

# Development

* [Getting Started](/development/getting-started)
* [Client](/development/client)
* [Contracts](/development/contracts)
* [SDK](/development/sdk)
* [Collaborators](/development/collaborators)

\n\n---\n\nfile: docs/pages/development/llm.mdx
meta: {
  "title": "LLM"
}

# LLM

These docs are experted at [https://eternum-docs.realms.world/llm.txt](https://eternum-docs.realms.world/llm.txt) for consumption by the LLM.

\n\n---\n\nfile: docs/pages/development/sdk.mdx
meta: {}

# SDK

## Compiling

From the root of the project, run:

```bash
pnpm i && pnpm run build:packages
```

## Structure

This SDK contains most notably the getter and setter of the configuration of Eternum, the EternumProvider and most of
the constants/types of the world that needed to be transcribed to Typescript.

Everything considered as client agnostic should be in there. The main reason for this separation is to be able to re-use
this logic in any other project that uses Typescript, e.g. new mobile client, data analytics app, etc.

\n\n---\n\nfile: docs/pages/mechanics/achievements.mdx
meta: {}

# Achievements & Quests

## Cartridge Achievements

Achievements are a lasting testament to your accomplishments across all seasons, awarded for completing specific in-game
objectives. Players earn achievements through the Cartridge Controller, with requirements accessible by clicking on
their controller name. Completing achievements earns Victory Points, allowing players to compete for positions on the
achievement leaderboard.

### Achievement Categories

🏰 **Realm Development**

⚔️ **Military**

🫏 **Trading**

🌟 **Special**

\n\n---\n\nfile: docs/pages/mechanics/key-concepts.mdx
meta: {
  "title": "Key Concepts",
  "description": "The foundational mechanics of Eternum"
}

# 🔑 Key Concepts

<img src="/images/covers/07.png" alt="Eternum Key Concepts" className="w-full rounded-lg my-6" />

This section outlines the core mechanics and systems that form the foundation of Eternum's gameplay.

## Realms

* **Limited Assets**: 8,000 unique and irreplaceable Realms serve as the foundation of Eternum
* **Settling**: Players must burn a Season Pass to settle their Realm during the initial 7-day settling period or after
* **Starting Resources**: Each newly settled Realm begins with a set of starting materials
* **Progression Path**: Realms advance from Settlements → Cities → Kingdoms → Empires, unlocking additional buildable
  hexes and defensive army slots
* **Resource Production**: Each Realm can produce 1-7 different resources based on its Season Pass and original NFT
  metadata

## Villages

* **Accessible Entry**: Villages can be established around settled Realms, offering a gateway for new players
* **Limited Production**: Produce resources at 50% the rate of Realms
* **Parent Realm**: Each Village is tied to a parent Realm and can only receive troops from it
* **Scaling**: Up to 6 Villages per Realm, allowing for 48,000 Villages in Season 1
* **Simple Progression**: Villages can upgrade from Settlement to City

## Resources

* **Economy Foundation**: 22 distinct resources drive all gameplay activities
* **Resource Categories**:
  * **Basic Resources**: Food (Wheat, Fish) - essential for production, troop maintenance, and construction
  * **Tiered Resources**: Distributed based on rarity across the 8,000 Realms, creating natural scarcity and trade
    opportunities
  * **Strategic Resources**:
    * **Military Resources**: Units with unique properties that can be assigned to armies
    * **Transport**: Donkeys required for moving resources and essential for logistics
  * **Special Resources**: $LORDS currency for all market transactions and Ancient Fragments for Hyperstructures
* **ERC20 Compatibility**: All resources can be traded freely and bridged out as ERC20 tokens through the central bank

## Buildings

* **Construction Modes**: Two building systems available - Standard (resource-efficient) and Simple (labor-focused)
* **Building Types**:
  * **The Keep**: Central structure automatically constructed when settling, provides baseline population capacity
  * **Resource Buildings**: Specific buildings for each of the 22 resources, only requiring food to construct
  * **Economic Buildings**: Includes farms, fishing villages, worker huts, storehouses, and markets
  * **Military Buildings**: Nine different buildings for producing three tiers of each troop type
* **Placement & Population**: Buildings require buildable hexes and population capacity, with more unlocked as Realms
  progress

## Production

* **Production Modes**: Like buildings, production can be done in Standard (resource-intensive) or Simple (food and
  labor) mode
* **Production Types**:
  * **Food**: The only resources (Wheat, Fish) that can be produced without inputs
  * **Resources**: Require combinations of other resources (standard) or labor (simple)
  * **Labor**: Produced by burning resources in the Keep, used for simple mode construction and production
  * **Troops**: Essential for exploration and warfare, with higher tiers requiring lower tier troops as inputs
  * **Donkeys**: One-time-use transport, consumed after a single journey
* **Production Efficiency**: Realms produce at full capacity, while Villages produce at 50% rate

## World Map

* **Exploration System**: The world begins shrouded in mystery, with only six ancient Banks visible at season start;
  adjacent hexes are revealed when settling, and armies can explore to reveal new areas
* **Biomes**: 16 unique biome types procedurally generated across the map, each affecting combat effectiveness and troop
  movement differently
* **Movement & Stamina**: Armies move using stamina (regenerating at +20 per Eternum Day), with costs varying by biome
  and troop type; Knights, Crossbowmen, and Paladins each have different maximum stamina capacities
* **Exploration Mechanics**: Exploring costs 30 stamina per hex and reveals that area permanently to all Lords;
  exploring armies may discover resources or encounter world structures and agent armies

## Military

<img src="/images/covers/04.png" alt="Eternum Military" className="w-full rounded-lg my-6" />

* **Army Composition**: Armies consist of a single troop type and tier (Knights, Crossbowmen, or Paladins)
* **Troop Tiers**: T1, T2, and T3 troops with increasing combat strength (two T1 troops combine to make one T2, two T2
  make one T3)
* **Combat Factors**: Battles resolved based on army damage, stamina modifiers, and biome effects
* **Army Types**:
  * **Attacking Armies**: Deploy onto the world map for exploration and conquest, require 30+ stamina to attack
  * **Defending Armies**: Protect Realms and structures in defense slots, with slots increasing by Realm level
* **Stamina System**: Armies recover +20 stamina daily, with 30+ stamina needed for full combat effectiveness
* **Biome Effects**: Each troop type has advantages (+30% damage) or disadvantages (-30% damage) in specific biomes
* **Raiding Mechanics**: Armies can attempt to steal resources from structures without defeating defenders
  * Success depends on the raiding army's damage relative to defending armies
  * Undefended structures can be raided without casualties

## Social Structures

* **Tribes**: Player-formed organizations enabling cooperation and coordination
* **Types**: Public (open to all) or Private (invitation only)
* **Benefits**: Access to tribe-only features and Hyperstructure contributions

## Victory Conditions

Eternum's seasonal gameplay culminates in victory through various achievement paths, with winners earning recognition
and rewards that impact future seasons.

\n\n---\n\nfile: docs/pages/mechanics/tribes.mdx
meta: {
  "title": "Tribes",
  "description": "Social organizations in Eternum"
}

# 👥 Tribes

<img src="/images/covers/09.png" alt="Eternum Tribes" className="w-full rounded-lg my-6" />

In Eternum, Tribes represent player-formed organizations that enable cooperation and coordination among members.

## Types of Tribes

* **Public Tribes**: Open to all, allowing anyone to join
* **Private Tribes**: Require an invitation to join

## Benefits of Tribes

* Access to tribe-only features
* Contribution to Hyperstructures as a collective

## Formation & Membership

🫂 **Tribe System**

* Any player can create a tribe
* Set tribe name and description
* Two types of tribes:
  > * **Public**: Anyone can join directly
  > * **Private**: Requires an invitation to join

## Functionality

🏗️ **Current Features**

* Social coordination tool
* Access to tribe-only Hyperstructure contributions
  > *When Hyperstructure is set to tribe-only mode*

\n\n---\n\nfile: docs/pages/mechanics/victory.mdx
meta: {}

# Victory

Prize Pool & Split

\n\n---\n\nfile: docs/pages/mechanics/worldmap-and-movement.mdx
meta: {}

import TroopMovementTable from "@/components/TroopMovementTable";
import { BiomeStamina } from "@/components/BiomeStamina";

# 🗺️ World Map & Movement

<img src="/images/covers/05.png" alt="Eternum World Map" className="w-full rounded-lg my-6" />

## The World Map

### An Unexplored World

At the beginning of each season, Eternum lies entirely unexplored, shrouded in mystery and opportunity. The only
exceptions are the six ancient Banks, whose location and surrounding hexes are known and visible from the outset. They
can be seen when settling and when observing the world view, each equidistant from the centre of the map and from one
another.

When Lords settle a Realm or Village, the six hexes directly adjacent are automatically revealed if they haven't already
been explored. Beyond these instances, the world remains cloaked by the mist, waiting for ambitious Lords to send forth
their armies to explore. Once a hex is explored, the state of the hex (i.e. the biome and whether it contains a world
structure or army) is permanently revealed to all Lords.

### Biomes

Each hex is assigned one of 16 biome types, each with unique aesthetics and strategic implications. These biomes are
procedurally generated across the world map following specific rules that dictate their distribution, ensuring a
coherent yet varied world, with certain biomes naturally occurring more or less frequently than others.

Biomes impact both combat effectiveness and troop movement. Each troop type—Knights, Crossbowmen, and Paladins—can
potentially be advantaged or disadvantaged in battle depending on the biome in which combat takes place; this is
explained in more detail in the Combat section. Additionally, biomes have the potential to enhance or impede army
maneuvers, as the various biomes impact the stamina consumption of each troop type differently as they move between
hexes—this is explained further in the subsection below.

## Movement & Exploration

<img src="/images/covers/04.png" alt="Troops Moving Across Eternum" className="w-full rounded-lg my-6" />

### Stamina

Troops in Eternum are deployed onto the world map as armies. Army movement and actions across the map are governed by
stamina, a critical resource Lords must carefully manage.

Stamina is expended whenever an army moves between hexes, explores previously unrevealed areas, or launches an attack
against enemy forces. Each of these actions has a specific stamina cost, making strategic planning essential to
maximizing an army's effectiveness. Armies regenerate stamina at a consistent rate of +20 stamina per Eternum Day. Each
troop type possesses different maximum stamina capacities, outlined in the table below:

<TroopMovementTable />

Lords should remain cautious about fully depleting the stamina of their armies, as forces with low stamina may find
themselves severely disadvantaged if attacked by enemy forces.

### Movement

![Simple Mode Production](/gifs/moving-army.gif)

Armies in Eternum can move freely into any adjacent, unoccupied hex. A hex is considered occupied if it contains a
Realm, Village, another army, or a world structure such as a Bank, Fragment Mine, or Hyperstructure. Armies may also
move to more distant hexes, provided there is a continuous path of adjacent, unoccupied hexes leading to the
destination, and the army has sufficient stamina available for the entire journey.

The amount of stamina consumed when moving into a hex depends on both the biome of that hex and the type of troops
within the army. The table below details biome-specific stamina costs for each troop type:

<BiomeStamina />

### Exploring

When an army is positioned adjacent to an unexplored hex, Lords may choose to send that army forth to uncover what lies
hidden. Exploring an unknown hex always costs 30 stamina and will reveal that hex to all Lords, permanently expanding
the known boundaries of the world.

If the newly explored hex contains a world structure or an agent army, the exploring army will automatically be pushed
back to the hex from which they started without any additional stamina penalty. Additionally, during exploration, armies
gather any valuables they encounter, receiving a stack of randomly selected resources directly into their inventory. If
an army becomes overloaded, resources can be dropped to free up space, but any discarded materials will be permanently
lost (burned).

Given the possibility of encountering hostile agent armies during exploration, Lords should ensure that their exploring
armies are well-prepared and capable of defending themselves in unexpected combat situations.

\n\n---\n\nfile: docs/pages/overview/bridging.mdx
meta: {}

import { Callout } from "vocs/components";

# Bridge Closure

<Callout type="danger">
  # Critical End-Game Information The Game Bridge **permanently** closes **48 hours** after victory has been claimed.

  [Read the full End Season Disclaimer](/overview/disclaimer) to understand all risks and limitations.
</Callout>

## Bridging in Eternum

Eternum is a fully onchain game with immutable smart contracts, meaning the game rules cannot be altered. Bridging
tokens in and out of the game is a core mechanic, but you must carefully manage this process.

<Callout type="warning">
  ### End Game Bridge Closure

  <div />

  The game bridge closes **permanently** 48 hours after "End Season" is triggered - Only resources in your Realm's
  direct balance can be bridged out - Resources in the following locations are NOT part of your bridgeable balance: -
  AMM Liquidity Pool positions - Open market orders - Resources in transit - Any resources not bridged out by the
  deadline are **permanently locked** in the contract
</Callout>

## Bridging in

This is the only way to bridge in Lords to the game. This converts ERC20 Lords into in-game Lords. Only in-game Lords
can be used to build and trade with.

### Initial Bridge

You need to first initialize the transfer.

<img src="/gifs/bridge-in.gif" alt="Bridge" width="800" className="mx-auto" />

### Final Bridge (Within Game Client)

Once you finish the first step, the Lords/resources will appear in your inventory to be used in the game.

<img src="/gifs/resource-arrival.gif" alt="Bridge" width="800" className="mx-auto" />

## Bridging out

You can bridge out resources from the game, which will be converted to the ERC20 contracts.

<Callout type="error">
  ### ⚠️ Critical Security Warning ⚠️

  <div />

  Your Realm remains vulnerable to being claimed by other players until you complete the **final withdrawal step** -
  Because bridged resources are linked to your realm until the final withdraw, if your Realm is claimed during the
  bridging process, the bridged resources can be stolen - **Always maintain sufficient troops** to defend your Realm
  during the bridging process
</Callout>

### Security Best Practices

To ensure safe bridging:

1. Maintain a defensive force of troops in your Realm during the entire bridging process
2. Complete the final withdrawal step as soon as possible

### Game End

When "End Season" is triggered:

1. A **48-hour countdown** begins immediately
2. During this window, you can only:
   * Bridge out **$LORDS** and resources from your Realm's direct balance
   * Register your score (within 4 days)

To preserve your assets, you **must**:

> 1. Remove all liquidity from AMM pools **before** the season ends
> 2. Cancel all open orders on the Order Book **before** the season ends
> 3. Ensure all resource transfers to your Realm are completed **before** the season ends
> 4. Bridge out **$LORDS** and **Resources** from your Realm's balance within the 48-hour window

<Callout type="error">
  ### ⚠️ Permanent Loss Warning ⚠️ - The 48-hour countdown is **final** and **cannot be extended** - Developers

  **cannot** recover any assets after the bridge closes - Any resources not in your Realm's direct balance **cannot** be
  bridged out - Plan ahead to ensure all your assets are in your Realm's balance before the season ends
</Callout>

# 🌉 Bridging Guide

<img src="/images/covers/03.png" alt="Eternum Bridging" className="w-full rounded-lg my-6" />

This guide provides step-by-step instructions for bridging assets between Starknet and Eternum.

\n\n---\n\nfile: docs/pages/overview/controller.mdx
meta: {
  "title": "Cartridge Controller",
  "description": "Using the Cartridge Controller in Eternum"
}

# Cartridge Controller

The Cartridge Controller is a gaming-focused smart contract wallet that makes Web3 gaming accessible and transactionless
via Session Keys. You must have a controller to play Eternum. To find out more about the controller, read their
documentation [here](https://docs.cartridge.gg/controller/overview).

## Using the Controller in Eternum

To use Season Passes and **$LORDS**, you will need to transfer them from your ArgentX or Braavos wallet to your
controller.

To use the controller, you can either log in or sign up when starting Eternum. To create a controller, simply input a
username and sign up.

<img src="/images/screenshots/controller.png" alt="Controller" width="300" className="mx-auto" />

You will then be prompted to set up a Passkey and PIN password. Passkeys are securely provisioned credentials for
signing blockchain transactions. They can be generated by your platform authenticator, such as Face ID, Touch ID, or a
password manager like Bitwarden or 1Password.

<br />

Once this is complete, you will be able to 'Create Session'. This enables all of the game functions in a transactionless
session.

## Transfer Season Pass to Controller

Transfer a season pass to your controller easily [here](https://empire.realms.world/season-passes). Connect your
controller by selecting the controller icon located at the top of the page and select the passes to transfer.

## Controller Key Features

### Simple and Secure

* Passwordless authentication using Passkeys for one-click onboarding
* Self-custodial embedded wallets that put players in control
* Built-in security features to protect player assets

### Designed for Seamless Gameplay:

* Session keys eliminate transaction popups during gameplay
* Secure transaction delegation lets games submit actions on behalf of players
* Free transactions through the Cartridge Paymaster so players focus on playing

### Supported Platforms and Passkey Backup

Passkeys are well-supported across modern platforms. You can use them with device authenticators directly or pair them
with a mobile device using the QR flow. For those without device authenticators, several password managers like
Bitwarden (free), 1Password, and Dashlane support Passkeys.

#### Backing Up Your Passkey

* Apple devices: Passkeys are backed up along with your keychain in iCloud.

* Android devices: Passkeys are backed up with your Google account.

* Windows devices: Passkeys are created and managed as part of your Windows account.

#### Using Controller Across Devices

Currently, Controller availability across devices depends on how the Passkey was created. Some platforms automatically
synchronize them across devices for seamless use. For cross-platform usage (e.g., Apple and Android), synchronization
might not be available. For now, we recommend using a Password Manager or the QR flow to support this configuration.
Multi-credential support is coming soon to enhance device compatibility.

Should you have any issues with the controller or require support, you can join the Cartridge Discord
[here](https://discord.gg/cartridge).

\n\n---\n\nfile: docs/pages/overview/disclaimer.mdx
meta: {}

import { formatNumberWithSpaces } from "@/utils/formatting";
import { ETERNUM_CONFIG } from "@/utils/config";
import { Callout } from "vocs/components";

# Disclaimer and Risk Acknowledgment

<Callout type="danger">
  Important Disclaimer – Please Read Carefully <br />
  By participating in Eternum, you fully acknowledge and accept the following terms and conditions.
</Callout>

## Immutable Contracts

Eternum is governed entirely by **immutable** smart contracts. Once deployed, the game’s rules and mechanics **cannot be
altered, updated, or reversed** by the developers, the DAO, or any other party. These smart contracts have **not** been
audited. Players should fully understand the implications of interacting with the system and assess the risks involved.

## Risk of Loss

All transactions and gameplay actions in Eternum are **final**. There are no mechanisms for refunds, reversals, or
compensation. You acknowledge the **risk of loss of funds** and accept that you bear sole responsibility for any
financial impact incurred.

A season of Eternum concludes when a single player achieves the required
**{formatNumberWithSpaces(ETERNUM_CONFIG().hyperstructures.hyperstructurePointsForWin)}** Victory Points and clicks the
"End Season" button. At this point:

### ⚠️ SEASON END CRITICAL INFORMATION

When the season ends, **ALL in-game actions are DISABLED.**

#### ⛔️ Disabled Actions

* You **cannot** retrieve LP positions from the AMM
* You **cannot** cancel market orders to retrieve locked resources
* You **cannot** conclude ongoing battles

1. **48-Hour Withdrawal Window (starts immediately when "End Season" is clicked)**

   * Starting from the exact moment the season ends, you have **48 hours** to bridge out **ALL $LORDS** tokens and
     resources from your Realms' balance
   * **IMPORTANT:** Your Realm's balance withdrawal:
     * Can be BLOCKED if your Realm is in an active battle
     * Does NOT include resources that are:
       * Locked in AMM LP positions
       * Locked in market orders
       * In transit to your Realm (not yet deposited)
     * These locked/in-transit resources CANNOT be recovered after the season ends

2. **After 48 Hours**

   * Any remaining **$LORDS** tokens and **Resources** will be **permanently locked**
   * These assets **CANNOT** be recovered under any circumstances

3. **Score Registration**
   * Players have **4 days** to register their scores
   * Registration is **MANDATORY** to be eligible for prizes
   * While registration has a deadline, prize claiming does not

<Callout type="warning">
  **PRO TIP:** Don't wait for the season to end! You can and should start bridging out tokens during active gameplay to
  minimize risk.
</Callout>

Please refer to the documentation for detailed instructions on the bridging process during active gameplay.

## No Recourse

By participating in Eternum, you waive all rights to claims or recourse against the developers, the DAO, or any other
associated entities for any losses or disputes arising from your participation in the game.

## Acknowledgment of Terms

Participation in Eternum constitutes your agreement to these terms, as well as all other terms and conditions outlined
in the game’s documentation.

\n\n---\n\nfile: docs/pages/overview/entry.mdx
meta: {
  "title": "Game Entry & Participation",
  "description": "How to join and participate in Eternum seasons"
}

# Game Entry & Participation

## Season Access

### Realm Holder Entry <img src="/images/ring_pass.png" alt="Season entry" width="300" className=" float-right" />

Realm holders enjoy exclusive benefits, including free entry into each new Season. Each Season Pass is unique to a Realm
and grants access to the game. To use a season pass for game entry, players must transfer it to their Cartridge Wallet.

* Mint your pass [here](https://empire.realms.world/)

### Non-Realm Holder Entry

#### Marketplace

Should a Realm holder decide not to play with their Season Pass, they can transfer it or sell it on the
[Realms Marketplace](https://market.realms.world/) allowing non-Realm holders to participate in the game.

#### Villages

Villages are modest outposts that can be established around settled Realms, offering an accessible entry point into
Eternum. Each Realm can support up to six surrounding Villages, which can produce resources and participate in gameplay
at 50% the rate of Realms. This system allows for up to 48,000 Villages in Season 1, creating numerous opportunities for
new players to join the game.

For detailed information about Villages, including settling mechanics, resource production, and progression paths, visit
our [Villages guide](/mechanics/realm-and-villages/villages).

### Continuous Play

As long as you maintain in-game Realm ownership, you can actively participate without additional entry fees. Engage in
the market using **$LORDS** tokens and enjoy uninterrupted gameplay.

### Realm Control Mechanics

⚔️ **Takeover System**

In-game Realms can be conquered within a Season, transferring control to the conqueror. Gameplay rights are restored at
the start of the next Season, ensuring a dynamic and competitive environment.

🛡️ **Village Security**

Unlike Realms, Villages cannot be conquered or taken over by other players, making them an ideal choice for casual
players seeking a lower-risk gameplay experience. Villages can still participate in most gameplay activities - producing
resources, training troops, and engaging in trade - but at 50% the rate of Realms. This security, combined with their
accessibility and straightforward progression path from Settlement to City, makes Villages perfect for new players
looking to learn the game mechanics without the constant threat of conquest.

\n\n---\n\nfile: docs/pages/overview/introduction.mdx
meta: {
  "title": "Introduction to Eternum",
  "description": "Understanding the World of Eternum"
}

# Welcome to Eternum

<img src="/images/covers/01.png" alt="Eternum Landscape" className="w-full rounded-lg my-6" />

## The Lords Have Arrived

Across treacherous open seas and endless horizons, the legendary Galleon has finally arrived upon the lands of Eternum,
bearing the brave and ambitious souls known as Lords. Having journeyed for years, driven by dreams of power, glory, and
untold riches, these Lords have finally set foot upon their destination—a mysterious landscape ripe with ancient secrets
and unclaimed territories. Now, as the mists clear, each Lord must forge their own path in this land of promise and
peril.

## Establish Your Foothold

In Eternum, your task begins by settling a Realm or Village—a seat of power from which your destiny unfolds. Select your
strategic position upon the vast, unexplored, procedurally generated world map and secure vital materials to fuel your
expansion. Grow your influence through shrewd economic choices, military strategy, and diplomatic maneuvering, nurturing
your humble settlement into a mighty empire.

Yet, strength alone is insufficient, for Eternum is fraught with dangers—bandits roam unchecked and rival Lords covet
your lands. Armies must be raised, resources guarded, and alliances carefully chosen. Only through wise leadership and
vigilant defense can your Realm flourish and endure.

## Find Your Glory

Scattered throughout Eternum are the foundations of ancient Hyperstructures—colossal relics from an ancient civilization
far surpassing all known powers. Some unknown, cataclysmic event once destroyed all of these structures and plunged the
land into darkness and disorder. Lords who successfully reclaim, rebuild, and control these Hyperstructures will assert
their dominance over the vast continent, with one player eventually claiming ultimate victory.

However, Eternum's expansive world offers glory beyond mere conquest; whether through trade mastery, military prowess,
diplomatic excellence, or simply the joy of exploration, every Lord has the freedom to find their own path to greatness.

## Core Pillars

Eternum is built on three core pillars:

* **Player-Driven Economy**: The economy is shaped by player actions, from resource production to market prices.
* **Strategic Depth**: Master resource management, territorial control, and military prowess to succeed.
* **Community Governance**: Form tribes, build alliances, and influence the political landscape.

## Game Features

<img src="/images/covers/02.png" alt="Eternum Game Features" className="w-full rounded-lg my-6" />

Eternum offers high-stakes gameplay across defined seasons, set on an infinite, procedurally generated hexagonal map.
Players can pursue total victory or explore freely, with a focus on diplomacy, resource management, and tactical
decisions.

### Game Progression

* **Early Game**: Establish your Realm, build infrastructure, and secure resources.
* **Mid Game**: Expand influence, forge alliances, and develop military capabilities.
* **End Game**: Engage in epic battles, large-scale diplomacy, and resource warfare.

### Core Elements

* **Seasons**: Compete through strategic paths with resources from previous seasons.
* **World Map**: Navigate an infinite hexagonal grid with procedurally generated terrain.
* **Resources & Economy**: Trade 22 different resource types in player-driven markets.
* **Military Power**: Build armies, control territories, and engage in strategic warfare.
* **Social Structure**: Form tribes, manage diplomatic relations, and create alliances.

## Vision

Explore our
[detailed vision document](https://github.com/BibliothecaDAO/world-guide/blob/main/realms-world-guide-v1.0.0.pdf)

## Eternum as a Platform

Eternum lays the foundation for future development with open architecture, community extensions, and a focus on
innovation. It serves as a benchmark for onchain gaming capabilities.

\n\n---\n\nfile: docs/pages/overview/links.mdx
meta: {
  "title": "Quick Links",
  "description": "Essential links for Eternum"
}

# Quick Links

## Play & Learn

* [Play Eternum](https://eternum.realms.world/) - Start your journey
* [GitHub](https://github.com/BibliothecaDAO/eternum) - Explore the code
* [Season Pass](https://empire.realms.world/) - Mint your season pass
* [Season Pass Marketplace](https://element.market/starknet) - Buy your Season Pass on Element
* [Realms Marketplace](https://market.realms.world/) Buy a Realm NFT

## Community

* [Realms World](https://realms.world/) - The DAO behind Eternum
* [Discord](https://discord.gg/realmsworld) - Join our discord
* [Twitter](https://x.com/LootRealms) - Follow the community
* [Twitter](https://x.com/RealmsEternum) - Follow for Eternum updates

\n\n---\n\nfile: docs/pages/overview/resource-addresses.mdx
meta: {}

import { ResourceAddresses } from "@/components/ResourceAddresses";

# Resource Addresses

<ResourceAddresses />

\n\n---\n\nfile: docs/pages/overview/world-physics.mdx
meta: {}

import { WeightTable } from "@/components/WeightTable";
import { Biomes } from "@/components/Biomes";

# World Physics

<img src="/images/covers/08.png" alt="Troops Moving Across Eternum" className="w-full rounded-lg my-6" />

In Eternum, every action is governed by onchain physics—immutable rules encoded directly onto the blockchain, ensuring
fairness, transparency, and absolute consistency for all Lords. Here, code is law; no exceptions exist outside the
boundaries set by these protocols.

## Seasons

Welcome to Season 1. Eternum, in its current form, comes and goes in seasonal launches. Each season marks a special time
of iteration and advancement in this new form of onchain gaming and may be likened to the movement of tides. Once a
season launches, the tide flows out and the Lords arrive to build their castles in the sand. Nothing, not even the
developers, can stop or alter the course of a season once launched, and players are free to take any action that the
rules of the game allow. Once a Lord accumulates the requisite Victory Points, they unlock the ability to end the
season—signalling the tide to come back in and put an end to the Lords' fun… until next season.

## Time

Time within a season is measured in Eternum Days, and each is precisely one hour in length. One day ends and the next
begins at the top of every real-world hour.

## Materials

In the world of Eternum, everything holds tangible, tokenized value—be it food, labor, resources, troops, or even the
trusty donkeys required for transport. These fungible tokens are generated within Eternum, but can be bridged in and out
of the game through Realms or Banks and traded on external marketplaces. All materials have an associated weight, which
determines the amount that can be stored and the number of donkeys required to move the goods from place to place.

<WeightTable />

Note: This document will use 'materials' to refer to all tangible assets with weight - i.e. food, resources, ancient
fragments, labor, troops, and donkeys. This is not to be confused with 'resources', which specifically refers to the 22
resources ranging from wood through to dragonhide. Tokens such as $LORDS and $STRK are not considered materials.

## Cost of Production

With the exception of food, nothing in Eternum is produced for free; every unit of production demands an input—food,
labor, resources, or some combination thereof. Lords must consider these costs and effectively balance trade to ensure
they can survive the season.

## Travel

Covering the vast lands of Eternum takes time… and donkeys. Every transfer of materials between locations relies
exclusively on these speedy and dependable creatures. These donkeys are single-use, consumed upon completing their
journey, making continuous acquisition vital for maintaining trade routes and strategic flexibility.

Moving tokenized troops through the donkey network may be fast, but to dominate your enemies and ensure security of your
lands, troops must be deployed to an army. Once troops are deployed, they cannot be retokenized, and are doomed to their
fate within this season of Eternum. Once troops are deployed to the world map, their mobility is governed by stamina,
limiting the distance they can travel and the number of actions they can perform. Travelling between hexes or initiating
an attack expends valuable stamina points, but they are partially replenished each Eternum Day.

## Hexes

Eternum unfolds across an infinite, procedurally-generated, hexagonal-tile world map. This represents the physical space
of the world and defines spawn locations, biome distribution, and distances between Realms, Villages, and other world
structures. This is the layer in which armies explore, fight, raid and capture, and is explorable in the 'World' view.

Zooming in, each Realm or Village hex is broken up into smaller hexes which define the local area and building placement
(hexes within hexes!). Here in the 'Local' view, Lords can plan out their building placement and closely manage their
population, supply chain, and production.

## Biomes

Each hexagonal tile on the world map possesses a distinct biome. Each troop type responds uniquely to these varied
terrains, gaining or losing combat efficiency and stamina based on their affinity with different biomes. Successful
Lords must master biome knowledge to exploit strategic advantages or avoid costly missteps.

<Biomes />

## The Known World

Initial scouting reports have revealed some key details about the world:

* Six ancient Banks have been located, distributed evenly in a ring around the central point. These structures are
  perfectly situated and designed to facilitate trade in this new world. Sufficiently prepared Lords may be able to
  capture these lucrative structures, but will likely make themselves a target in the process.

* An unknown number of Hyperstructure Foundations are scattered around the unexplored world. These are rare, key
  locations that must be claimed by Lords in order to rebuild the ancient Hyperstructures that are critical to achieving
  victory. They are more likely to be found in the central regions of the map, and as each subsequent Hyperstructure
  Foundation is discovered, the likelihood of finding another one in the world diminishes.

* Hundreds of mines are also strewn across the landscape. Prospectors have theorized that these mines are hotspots for
  finding ancient fragments needed to reconstruct key sections of the Hyperstructures.

* Bandits roam throughout the lands and have established lairs in all of these locations. The newly arrived Lords will
  need to overcome these lawless brigands to bring order and control back to Eternum.

\n\n---\n\nfile: docs/pages/mechanics/military/combat.mdx
meta: {}

import { BiomeCombat } from "@/components/BiomeCombat";
import {
  TotalArmiesTable,
  RealmDefenseSlotsTable,
  WorldStructureDefenseSlotsTable,
} from "@/components/DefendingArmies";

# ⚔️ Combat

<img src="/images/covers/06.png" alt="Troops Moving Across Eternum" className="w-full rounded-lg my-6" />

## Armies

![Create Army](/gifs/create-explorer.gif)

In Season 1, armies consist of a single troop type and tier—streamlining combat strategy and simplifying interactions on
the world map. Each hex can host only one army, so Lords must carefully manage their positioning and engagement
opportunities.

Each Realm and Village has a limited number of total armies, from which Lords can choose to deploy either attacking or
defending armies. The number of total armies can be increased by upgrading the Realm / Village level:

<TotalArmiesTable />

Each military building constructed on a Realm also increases total armies by 1. The maximum size of an army is 100,000
troops.

### Attacking Armies

Attacking armies are deployed onto one of the six hexes surrounding their parent Realm on the world map. If all hexes
adjacent to the Realm are occupied, an attacking army cannot be deployed. Once deployed, these armies occupy a hex and
traverse the world map based on the conditions outlined in the World Map & Movement section.

Armies may attack another army or structure on any adjacent hex. When attacking a structure, the attacking army will
engage in combat against any defending armies present.

### Defending Armies

Defending armies do not appear on the world map; instead, they occupy defense slots visible in the Military tab of the
Local view. When in the World view, Lords can observe the defensive capabilities of any structure by selecting a hex and
opening up the details tab. Realms and Villages have a maximum number of defensive slots based on their current level:

<RealmDefenseSlotsTable />

Other world structures have a static number of defence slots:

<WorldStructureDefenseSlotsTable />

When attacked, defending armies are targeted sequentially, starting from the outermost slot (slot 4) and progressing
inward. The outermost defensive army may also launch counter attacks against adjacent hexes. If a defensive army is
destroyed, its slot becomes unavailable for reinforcement for 24 hours. Once all defensive armies are defeated, the
Realm can be claimed by an adjacent attacking army.

## Troop Tiers

Troops in Eternum come in three distinct tiers: T1, T2, and T3. Tier 1 (T1) represents basic troops, while T2 and T3
troops are more advanced, offering significantly increased combat strength and stamina.

Higher-tier troops are produced by constructing specialized buildings that require rare resources and lower-tier troops
as inputs:

* Two T1 troops combine to produce one T2 troop
* Two T2 troops combine to produce one T3 troop

Each troop tier provides escalating advantages in terms of damage output and stamina.

## Stamina

Both attacking and defending armies depend heavily on stamina during combat encounters. Armies recover +20 stamina at
the start of each Eternum Day. Lords must carefully manage their armies' stamina, as exhausted armies will perform
poorly if attacked.

### Stamina Effects in Combat

**Attacking Armies:**

* Attacks require a minimum of 30 stamina
* Each stamina point above 30 grants an additional 1% damage, up to a maximum of 30% extra damage (total of 60 stamina)
* Armies with less than 30 stamina cannot initiate an attack

**Defending Armies:**

* Defending armies need at least 30 stamina to fight at full effectiveness
* Defenders with less than 30 stamina suffer a proportional damage penalty—down to a maximum reduction of 30% if their
  stamina reaches zero

## Biomes (Combat Effects)

Biomes significantly influence combat effectiveness, providing each troop type either a distinct advantage (+30%
damage), a disadvantage (–30% damage), or no modifier. When resolving combat, only the biome of the defending army's hex
is considered. Therefore, attacking armies must carefully select their targets to exploit biome conditions to their
advantage.

### Troop Type Biome Logic

**Knights:**

* Excel in forested biomes, utilizing both mobility and cover
* Struggle in unstable terrain (beaches, tundra, snow) and hot deserts due to heavy armor

**Crossbowmen:**

* Benefit from open seas and unstable terrain (beaches, snow, scorched ground) due to ranged capabilities
* Disadvantaged on sparse, flat terrains lacking sufficient cover

**Paladins:**

* Dominate on open terrain, leveraging mounted maneuverability
* Dense forests, scorched earth, and aquatic environments reduce combat effectiveness significantly

<BiomeCombat />

## Damage

Combat in Eternum is determined by a simplified damage system, relying primarily on army damage statistics, stamina
modifiers, and biome interactions. Detailed damage calculations consider base damage, stamina bonuses or penalties,
troop tier multipliers, and biome modifiers, resulting in straightforward yet strategic combat outcomes.

\n\n---\n\nfile: docs/pages/mechanics/military/raiding.mdx
meta: {}

## Raiding

Raiding allows armies adjacent to a world structure (Realms, Villages, Banks, Hyperstructures, Fragment Mines) to
attempt theft of valuable resources directly from the target structure, regardless of the presence of defending armies.

### Raid Success Conditions

* If the raiding army's damage is less than half the total damage of the defending armies, the raid will fail
* If the raiding army's damage is more than double that of the defending armies, the raid succeeds automatically
* If the raiding army's damage falls between these two extremes, the success probability scales proportionally between
  0% and 100%

Successful raids result in resources transferred directly to the raiding army's inventory up to their carrying capacity.
After the raid, damage is calculated between the raiding army and the outermost defending army, with casualties applied
accordingly.

Raids carried out against undefended structures succeed automatically, incurring no casualties for the raiding force.

\n\n---\n\nfile: docs/pages/mechanics/realm-and-villages/buildings.mdx
meta: {}

import BuildingCard from "../../../components/BuildingCard";

# Buildings

## Standard vs. Simple

Season 1 offers two building systems. Lords can switch between standard and simple building modes at any time by
clicking the toggle at the top of the construction tab.

![Simple Mode Production](/gifs/simple-mode.gif)

Note: Some buildings only require food to construct. Farms, Fishing Villages and Resource Buildings have the same
construction cost in both standard and simple building modes.

### Standard Mode

This is the classic Eternum experience. Construction requires a combination of labor and a particular set of resources
as building materials. Standard mode is more complex as it involves a greater number of materials in storage, however it
is far more efficient overall. This building mode is generally designed for those with multiple Realms and/or Villages
working with economies of scale.

### Simple Mode

This mode allows players to utilize Labor, a new material for Season 1, as the singular input for construction. Simple
mode greatly improves accessibility and simplifies gameplay overall, but is much less efficient in both time and
materials. This would be the preferred system for players with smaller holdings and limited access to a variety of
resources.

## Placement & Population

### Placement

The construction tab can be accessed in the Local view. Buildings can be constructed on any buildable hex of a Realm or
Village, provided the owner has the requisite materials and population capacity. Buildable hexes are defined by the
upgrade level (i.e. Settlement, City, Kingdom, or Empire) and are visible as hexes with patches of bare, prepared earth.
Most buildings can be constructed in either simple or standard mode, which toggled at the top of the construction tab.

![Building Placement](/gifs/construction.gif)

### Population

Population is the total population utilised by the currently constructed production buildings on a Realm or Village,
while the population capacity is the maximum available population with which to construct production buildings. Worker
Huts can be built to increase population capacity, while all other buildings require population capacity to be available
in order to construct. Lords must balance their construction to ensure there is enough population capacity available to
construct their desired production buildings.

## Building Types

### The Keep

Settling any Realm or Village will automatically construct a structure in the centre of your buildable hexes, known as
the Keep. This structure represents your seat of power and the central point of governance, and facilitates key
functions such as Realm/Village upgrades and Labor production. This building cannot be destroyed and provides a baseline
population capacity of 5.

<BuildingCard
  title="Labor Camp"
  image="/images/buildings/construction/castleZero.png"
  buildingType={25}
  description={[
  "Produces Labor resource",
  "No population requirement",
  "Available in both simple and standard building modes",
]}
/>

### Resource Buildings

There is a specific resource building for each of the 22 resources in the game, so Lords will require separate resource
buildings if they wish to produce more than one type of resource. These buildings only require food to construct and
have the same requirements in simple and standard mode.

<div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(230px, 1fr))', gap: '0.75rem' }}>
  <BuildingCard
    title="Stone Quarry"
    image="/images/buildings/construction/mine.png"
    buildingType={3}
    description={[
  "Produces Stone resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes"
]}
  />

  <BuildingCard
    title="Coal Mine"
    image="/images/buildings/construction/mine.png"
    buildingType={4}
    description={[
  "Produces Coal resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Lumber Camp"
    image="/images/buildings/construction/lumber_mill.png"
    buildingType={5}
    description={[
  "Produces Wood resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Copper Mine"
    image="/images/buildings/construction/forge.png"
    buildingType={6}
    description={[
  "Produces Copper resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Ironwood Grove"
    image="/images/buildings/construction/lumber_mill.png"
    buildingType={7}
    description={[
  "Produces Ironwood resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Obsidian Flows"
    image="/images/buildings/construction/mine.png"
    buildingType={8}
    description={[
  "Produces Obsidian resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Gold Mine"
    image="/images/buildings/construction/forge.png"
    buildingType={9}
    description={[
  "Produces Gold resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Silver Mine"
    image="/images/buildings/construction/forge.png"
    buildingType={10}
    description={[
  "Produces Silver resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Mithral Forge"
    image="/images/buildings/construction/forge.png"
    buildingType={11}
    description={[
  "Produces Mithral resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Alchemical Workshop"
    image="/images/buildings/construction/forge.png"
    buildingType={12}
    description={[
  "Produces Alchemical Silver resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Cold Iron Foundry"
    image="/images/buildings/construction/forge.png"
    buildingType={13}
    description={[
  "Produces Cold Iron resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Deep Crystal Cave"
    image="/images/buildings/construction/mine.png"
    buildingType={14}
    description={[
  "Produces Deep Crystal resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Ruby Mine"
    image="/images/buildings/construction/mine.png"
    buildingType={15}
    description={[
  "Produces Ruby resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Diamond Mine"
    image="/images/buildings/construction/mine.png"
    buildingType={16}
    description={[
  "Produces Diamond resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Hartwood Sanctuary"
    image="/images/buildings/construction/lumber_mill.png"
    buildingType={17}
    description={[
  "Produces Hartwood resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Ignium Harvester"
    image="/images/buildings/construction/forge.png"
    buildingType={18}
    description={[
  "Produces Ignium resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Twilight Quartz Mine"
    image="/images/buildings/construction/mine.png"
    buildingType={19}
    description={[
  "Produces Twilight Quartz resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="True Ice Harvester"
    image="/images/buildings/construction/mine.png"
    buildingType={20}
    description={[
  "Produces True Ice resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Adamantine Mine"
    image="/images/buildings/construction/forge.png"
    buildingType={21}
    description={[
  "Produces Adamantine resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Sapphire Mine"
    image="/images/buildings/construction/mine.png"
    buildingType={22}
    description={[
  "Produces Sapphire resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Ethereal Silica Harvester"
    image="/images/buildings/construction/mine.png"
    buildingType={23}
    description={[
  "Produces Ethereal Silica resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Dragonhide Harvester"
    image="/images/buildings/construction/dragonhide.png"
    buildingType={24}
    description={[
  "Produces Dragonhide resource",
  "Requires 2 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />
</div>

### Economic Buildings

These buildings define the utility of a Realm or Village, including food production, donkey production, population
capacity, and storage capacity. All of these buildings can be constructed in either standard or simple mode, but have
varying costs and population requirements:

\[economic building table, including population cost / population capacity increase (Worker Hut) / storage capacity
increase (Storehouse)]

<div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(230px, 1fr))', gap: '0.75rem' }}>
  <BuildingCard
    title="Worker's Hut"
    image="/images/buildings/construction/workers_hut.png"
    buildingType={1}
    description={[
  "Increases population capacity by 5",
  "Required to construct and sustain production buildings",
  "Available in both simple and standard building modes"
]}
  />

  <BuildingCard
    title="Storehouse"
    image="/images/buildings/construction/storehouse.png"
    buildingType={2}
    description={[
  "Increases storage capacity for resources",
  "Requires 2 population to operate",
  "Available in both simple and standard building modes",
]}
  />

  <BuildingCard
    title="Donkey Stable"
    image="/images/buildings/construction/market.png"
    buildingType={27}
    description={[
  "Produces Donkeys for transportation",
  "Requires 3 population to operate",
  "Available in both simple and standard building modes",
]}
  />

  <BuildingCard
    title="Farm"
    image="/images/buildings/construction/farm.png"
    buildingType={37}
    description={[
  "Produces Wheat (food) resource",
  "Requires 1 population to operate",
  "Same construction cost in both simple and standard modes",
]}
  />

  <BuildingCard
    title="Fishing Village"
    image="/images/buildings/construction/fishing_village.png"
    buildingType={38}
    description={[
  "Produces Fish (food) resource",
  "Requires 1 population to operate",
  "Same construction cost in both simple and standard modes"
]}
  />
</div>

### Military Buildings

Your military buildings are essential for training up armies to defend your territories and project your might. There
are three 'tiers' of each of the three troop types, but a different building is required to produce each troop tier. As
such, there are a total of 9 military buildings in the game.

Note: Only T1 troop buildings can be constructed in both standard and simple mode. T2 and T3 military buildings are only
available for construction in standard mode.

<div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(230px, 1fr))', gap: '0.75rem' }}>
  <BuildingCard
    title="Footman Barracks (T1)"
    image="/images/buildings/construction/barracks.png"
    buildingType={28}
    description={[
  "Produces T1 Footman units",
  "Requires 3 population to operate",
  "Available in both simple and standard building modes"
]}
  />

  <BuildingCard
    title="Knight Quarters (T2)"
    image="/images/buildings/construction/barracks.png"
    buildingType={29}
    description={[
  "Produces T2 Knight units",
  "Requires 3 population to operate",
  "Only available in standard building mode",
]}
  />

  <BuildingCard
    title="Guardian Sanctum (T3)"
    image="/images/buildings/construction/barracks.png"
    buildingType={30}
    description={[
  "Produces T3 Royal Guardian units",
  "Requires 3 population to operate",
  "Only available in standard building mode",
]}
  />

  <BuildingCard
    title="Archery Range (T1)"
    image="/images/buildings/construction/archery.png"
    buildingType={31}
    description={[
  "Produces T1 Archer units",
  "Requires 3 population to operate",
  "Available in both simple and standard building modes",
]}
  />

  <BuildingCard
    title="Crossbow Garrison (T2)"
    image="/images/buildings/construction/archery.png"
    buildingType={32}
    description={[
  "Produces T2 Crossbowman units",
  "Requires 3 population to operate",
  "Only available in standard building mode",
]}
  />

  <BuildingCard
    title="Hunting Den (T3)"
    image="/images/buildings/construction/archery.png"
    buildingType={33}
    description={[
  "Produces T3 Beast Hunter units",
  "Requires 3 population to operate",
  "Only available in standard building mode",
]}
  />

  <BuildingCard
    title="Horseman Stables (T1)"
    image="/images/buildings/construction/stable.png"
    buildingType={34}
    description={[
  "Produces T1 Horseman units",
  "Requires 3 population to operate",
  "Available in both simple and standard building modes",
]}
  />

  <BuildingCard
    title="Paladin Sanctuary (T2)"
    image="/images/buildings/construction/stable.png"
    buildingType={35}
    description={[
  "Produces T2 Paladin units",
  "Requires 3 population to operate",
  "Only available in standard building mode",
]}
  />

  <BuildingCard
    title="Dragon Pit (T3)"
    image="/images/buildings/construction/stable.png"
    buildingType={36}
    description={[
  "Produces T3 Dragon Rider units",
  "Requires 3 population to operate",
  "Only available in standard building mode"
]}
  />
</div>

\n\n---\n\nfile: docs/pages/mechanics/realm-and-villages/realm.mdx
meta: {}

import { StartingResources, StructureType } from "@/components/StartingResources";
import { TotalArmiesTable, RealmDefenseSlotsTable } from "@/components/DefendingArmies";
import { BuildableHexes } from "@/components/BuildableHexes";
import { RealmLeveling } from "@/components/RealmLeveling";

## Realms

The 8,000 Realms are the foundation of Eternum, each uniquely destined to shape the fate of this vast continent. As
limited and irreplaceable strongholds, these Realms serve as the primary playing pieces of the game. Each Realm settled
in Eternum can produce between one and seven different resources, depending on the metadata of the original Realm NFT
and its Season Pass.

### Settling

To settle a Realm, Lords must first burn a Season Pass, which gives them the ability to select the location of their
homeland from an array of locations scattered across the map. For Season 1, there is a seven-day settling period before
the game starts, allowing players to organise and position themselves before a move can be made. Realms can still be
settled after this period, however they may be at a disadvantage if spawning near established Realms late in the season.

![Realm Settling Screen](/screenshots/settling.png)

### Starting Resources

<StartingResources structureType={StructureType.Realm} />

### Realm Progression

Realms can grow from a Settlement into a City, then to a Kingdom, and finally an Empire. Each upgrade level unlocks
additional buildable hexes and defensive army slots, allowing for the expansion of your economy and strengthening of
your defences. Each progression requires specific materials, outlined in the table below:

<RealmLeveling />

<BuildableHexes />

<TotalArmiesTable />

<RealmDefenseSlotsTable />

\n\n---\n\nfile: docs/pages/mechanics/realm-and-villages/villages.mdx
meta: {}

import ResourceProbability from "@/components/ResourceProbability";
import { StartingResources, StructureType } from "@/components/StartingResources";

## Villages

Beyond the limited number of sacred Realms lies the humble yet vital Village—small settlements established on hexes that
surround a settled Realm. These modest outposts offer a more accessible entry into Eternum, serving as gateways for new
settlers and loyal subjects. Additionally, they can act as supplementary playing pieces for more serious players who
wish to maximise their potential. Each settled Realm can have up to six Villages surrounding it, allowing up to 48,000
Villages in Season 1!

### Settling

Villages are settled by minting a Village token. Aspiring settlers can choose to place their Village next to a specific
Realm by entering the asset ID of a settled Realm, or let fate guide them to a random Realm's outskirts - either way,
the Realm that they spawn adjacent to becomes that Village's 'parent' Realm. Players may also choose which of the six
possible hexes they spawn on by selecting a compass direction.

\[todo: add image of villages surrounding realm]

### Starting Resources

<StartingResources structureType={StructureType.Village} />

### Resource Roll

When minting a Village, a random number is rolled to determine the single resource that it can produce.

<ResourceProbability />

### Limitations

Villages produce food, resources, troops, donkeys, and labor at 50% the rate of Realms. They can receive and purchase
food, labor, donkeys and resources without restriction, but can only receive troops from their parent Realm - this
limitation is in place to prevent players from spawning a Village on their rival's Realm and 'teleporting' troops there
by using the donkey network.

### Village Progression

Villages have a limited progression path and may only upgrade once from Settlement to City. The cost and benefits of
this progression is the same as that of a Realm.

\n\n---\n\nfile: docs/pages/mechanics/realm-and-villages/wonders.mdx
meta: {
  "title": "Wonders",
  "description": "The Wonders of Realms Eternum"
}

# Wonders

> **Work in Progress:** This documentation is currently under development and will be updated with more information
> soon.

\n\n---\n\nfile: docs/pages/mechanics/resources/production.mdx
meta: {}

import {
  StandardTroopProduction,
  SimpleTroopProduction,
  SimpleResourceProduction,
  StandardResourceProduction,
  LaborProduction,
  DonkeyProduction,
} from "@/components/ResourceProduction";

## Production

### Standard vs. Simple

As for building construction, Lords can choose between standard and simple production systems when deciding how they
wish to produce their materials. This can be done by selecting the appropriate panel when making an order in the
production screen.

![Simple Mode Production](/gifs/simple-mode.gif)

Note: Production works a little differently in Season 1 compared to Season 0. Instead of streaming resources unit by
unit and producing an output for as long as you have the requisite inputs, Lords must now commit the full material
requirements to the production order upfront. The output is then produced at a given rate per second.

#### Standard Mode

The classic Eternum system—every resource and troop production order requires food and a combination of other resources
as inputs. As with buildings, standard mode is the more complex but efficient way to produce materials.

#### Simple Mode

Simple mode reduces the requirements for a production order to food and labor. This is, once again, less efficient in
both time and resources—but it allows Lords to produce resources on their Realm or Village even if they don't have
access to the input resources required in standard mode.

### Materials Production

#### Food

The rich and fertile lands of Eternum produce two staple food sources, Wheat and Fish. These are the only materials that
can be produced without inputs, so once a Farm or Fishing Village has been constructed, they can produce food
indefinitely.

#### Resources

The 22 resources found in Eternum are the backbone of the world economy. Producing one resource requires the input of
two other resources (standard mode), or labor (simple mode). Resources are also the main components in building
construction, troop production and Hyperstructure contributions - so mastery of these assets is key to success and
security.

<SimpleResourceProduction />

<StandardResourceProduction />

#### Labor

Labor is a new mechanic in Season 1 that has been introduced to simplify and supplement gameplay. It is the primary
input for buildings and production in simple mode, but is also required in standard mode for building construction,
Realm upgrades and Hyperstructure contribution.

Labor is produced by permanently burning resources in the central structure of a Realm or Village. This creates a steady
stream of Labor at a fixed rate. Each of the 22 resources can be burned to produce Labor at varying efficiency,
dependent on rarity. The amount of resources burned per second to produce Labor at the fixed rate is as follows:

<LaborProduction />

#### Troops

Troops are essential for exploration, defending your lands and conquering your enemies. Every Lord will be required to
use military buildings to produce troops and ensure they remain a relevant force throughout the game. In Season 1, two
new troop tiers have been introduced, each requiring a combination of food, rare resources, and troops of the previous
tier as input for production.

Note: Only T1 troops can be produced in both standard and simple mode. T2 and T3 troops can only be produced in standard
mode.

<SimpleTroopProduction />

<StandardTroopProduction />

#### Donkeys

The humble steeds that move all materials around Eternum must themselves be produced in a market building. Donkeys are
one-time-use and consumed after a single journey, so Lords will need to procure a steady supply of donkeys, either
through production or purchase, to ensure that they can sustain their supply chains, trade with other players, and buy
and sell from the Banks. Since donkeys are the 'gas' of this onchain world, they consume $LORDS - the native token of
the ecosystem - during production.

<DonkeyProduction />

\n\n---\n\nfile: docs/pages/mechanics/resources/resources.mdx
meta: {}

import RarityResourceTable from "@/components/RarityResourceTable";
import ResourceIcon from "@/components/ResourceIcon";
import TroopsLimitTable from "@/components/TroopsLimitTable";
import { ResourcesIds } from "@bibliothecadao/types";

# Resources

Resources are the foundation of **Eternum**'s economy. Each of the 22 resources plays a vital role in the game's
ecosystem, from basic production to advanced military operations. All in-game resources can be traded freely and bridged
out as ERC20 tokens through the central bank.

![Produce from building](/gifs/produce-from-building-click.gif)

## Resource Categories

#### Resource Tiers

Resources are distributed across the 8,000 Realms based on rarity, creating natural scarcity and trade opportunities.

<RarityResourceTable />

### Basic Resources

#### Food

<div style={{ display: "flex", alignItems: "baseline", gap: "0.5rem", marginBottom: "0.75rem" }}>
  <ResourceIcon name="Wheat" id={ResourcesIds.Wheat} />

  <ResourceIcon name="Fish" id={ResourcesIds.Fish} />
</div>

Food is the cornerstone of your realm's economy:

* Produced without additional resource inputs
* Required for most production chains
* Essential for maintaining troops and construction

<div style={{ margin: "1.5rem 0", borderTop: "1px solid #4d3923" }} />

### Strategic Resources

#### Military

<div style={{ display: "flex", alignItems: "baseline", gap: "0.5rem", marginBottom: "0.75rem" }}>
  <ResourceIcon name="Knight" id={ResourcesIds.Knight} />

  <ResourceIcon name="Crossbowman" id={ResourcesIds.Crossbowman} />

  <ResourceIcon name="Paladin" id={ResourcesIds.Paladin} />
</div>

<TroopsLimitTable />

Military units have unique properties:

* They can be traded as resources
* Cannot be converted back to tradeable form once assigned to an army
* Become permanent once assigned to armies but are transferable to other armies on the same hex

<div style={{ margin: "1.5rem 0", borderTop: "1px solid #4d3923" }} />

#### Transport

<div style={{ display: "flex", alignItems: "baseline", gap: "0.5rem", marginBottom: "0.75rem" }}>
  <ResourceIcon name="Donkey" id={ResourcesIds.Donkey} />
</div>

Essential for logistics:

* Required for moving resources
* Consumed during transport
* Critical for trade and supply chains

<div style={{ margin: "1.5rem 0", borderTop: "1px solid #4d3923" }} />

### Special Resources

#### **$LORDS** Currency

<div style={{ display: "flex", alignItems: "baseline", gap: "0.5rem", marginBottom: "0.75rem" }}>
  <ResourceIcon name="Lords" id={ResourcesIds.Lords} size="xl" />
</div>

**$LORDS** is Eternum's economic backbone:

* Used for all market transactions
* Bridgeable to external networks
* Required for game fees and operations

#### Labor

<div style={{ display: "flex", alignItems: "baseline", gap: "0.5rem", marginBottom: "0.75rem" }}>
  <ResourceIcon name="Labor" id={ResourcesIds.Labor} />
</div>

Labor is a fundamental production resource:

* Required for most building and production activities
* Regenerates over time based on population
* Cannot be directly traded but can be allocated to various tasks
* Essential for realm development and resource gathering

#### Ancient Fragments

<div style={{ display: "flex", alignItems: "baseline", gap: "0.5rem", marginBottom: "0.75rem" }}>
  <ResourceIcon name="Ancient Fragments" id={ResourcesIds.AncientFragment} />
</div>

Strategic end-game resource:

* Only found in world map Fragment Mines
* Required for Hyperstructures
* Cannot be produced by Realms

\n\n---\n\nfile: docs/pages/mechanics/resources/storage.mdx
meta: {}

import { WeightTable } from "@/components/WeightTable";
import { formatNumberWithCommas } from "@/utils/formatting";
import { divideByPrecision } from "@/utils/resources";
import { CapacityConfig, ResourcesIds } from "@bibliothecadao/types";
import { ETERNUM_CONFIG } from "@/utils/config";

## Storage System

Storage limits how many resources your realm can hold. Managing your storage capacity effectively is key to developing
your realm.

### Resource Weights

Resources in Eternum have different weights that affect storage:

<WeightTable />

### Storehouses <img src="/images/buildings/construction/storehouse.png" alt="Storehouse" width="300" className="float-right" />

Expand your storage capacity to support your growing realm:

* **Capacity**: Each storehouse adds
  {formatNumberWithCommas(ETERNUM_CONFIG().carryCapacityGram[CapacityConfig.Storehouse]/1000 )}kg of storage per
  resource

* **Expansion**: Build additional storehouses to increase total storage.

* **When storage is full**:
  * New production is wasted
  * Input resources continue to be consumed

### Storage Management Tips

> 💡 **Best Practices**
>
> * Check storage levels regularly
> * Build new storehouses before reaching capacity
> * Pause production when storage is nearly full
> * Plan resource usage to maximize storage efficiency

\n\n---\n\nfile: docs/pages/mechanics/resources/transfers-and-trade.mdx
meta: {}

# Transfers & Trade

## Transport

### Transfers

Throughout the season, Lords will face the need to transfer materials from place to place around the world map, whether
it be to their own Realms and Villages, or other structures like Banks, Hyperstructures, and Fragment Mines. Lords have
two primary options for initiating transfers:

* **Detailed Transfer**: Players can use the comprehensive transfer menu accessible from the Trade tab. This allows
  transfers of multiple types of materials simultaneously, to any structure on the map—including those belonging to
  other players.

![Detailed Transfer](/gifs/transfer-all.gif)

* **Quick Transfer**: Alternatively, Lords can swiftly transfer resources between their own structures using the
  resources sidebar, ideal for managing internal logistics and maintaining supply chains.

![Quick Transfer](/gifs/transfer-own.gif)

### The Donkey Network

When a transfer is initiated, donkeys travel through the invisible and immutable donkey network. This is the key
infrastructure upon which all material transport takes place, facilitating trade between players and Banks. One donkey
is capable of carrying up to 500 kg of materials, so the number of donkeys required for a transfer depends on the total
weight of the materials being moved. Once a transfer is initiated, it cannot be cancelled, and the journey will take
some time depending on the distance to the destination structure. Upon arrival, transferred materials and donkeys must
be manually claimed via the 'Resource Arrivals' tab before they become available for use.

## Banks & Marketplaces

### Banks

<div style={{ display: "flex", justifyContent: "center", margin: "2rem 0" }}>
  <img src="/images/buildings/construction/bank.png" alt="Bank Building" style={{ maxWidth: "100%", height: "auto", borderRadius: "8px" }} />
</div>

Six ancient Banks stand evenly distributed around, and equidistant from, the centre of the map.

At the start of the game, each Bank is occupied by powerful groups of bandits. Lords who conquer a Bank become the
beneficiary of any fees from the Automated Market Maker (AMM) trades that they facilitate. Although Banks collect fees
independently, they collectively share liquidity, ensuring consistent and stable trading conditions throughout Eternum.
Realms and Villages automatically utilize their nearest Bank when trading through the AMM.

### AMM (Automated Market Maker)

The Automated Market Maker (AMM) is a decentralized trading protocol facilitated by the six Banks, allowing for
instantaneous and trustless trades 24/7—the DeFi of Eternum. Trades executed via the AMM automatically utilize the
closest Bank, directing trade fees specifically to that Bank's owner. Lords can further benefit from the AMM by
contributing materials and $LORDS to liquidity pools, earning a share of the fees generated from subsequent swaps. Lords
should be aware of the relatively high fees for using the AMM and consider the Orderbook for other trading options
first.

### Orderbook

Complementing the AMM, the Orderbook is a peer-to-peer marketplace, allowing Lords to place precise buy or sell orders
at chosen quantities and prices. This traditional method of trading incurs lower fees and offers Lords strategic
control, enabling them to manage market conditions to their advantage and set OTC orders for friends and allies.

## Bridging (Portals)

Portals provide Lords with the ability to bridge materials into and out of Eternum, connecting the in-game economy with
the Starknet infrastructure layer. Portals are mysterious and unstable devices, so they tend to burn up most of the
materials sent through. However, there is evidence that the power of the Hyperstructures can increase the stability of
Portals throughout Eternum. As Lords manage to reestablish these mighty structures throughout the land, the efficiency
of bridging in and out of Eternum improves for all.

\[efficiency table]

Each Realm comes equipped with a Portal. Realm Lords are able to bridge materials both into and out of their Realms
directly. Villages, however, have more limited bridging capabilities—they can bridge materials out of Eternum, but not
in. This is in line with their existing restrictions on receiving troops from external sources. They are also limited to
utilizing the Portal belonging to their parent Realm, for which the Realm owner collects a 5% fee on all materials and
tokens bridged out of the game.

Banks also have portals to allow Lords to manage liquidity positions. These positions may be bridged in and out
directly, and are linked with the wallet rather than a particular Realm or Village. Therefore, if a Lord loses their
Realm to another through conquest, they will still be able to manage any LP that they have with the bank.

\n\n---\n\nfile: docs/pages/mechanics/world-structures/hyperstructures.mdx
meta: {}

import { HyperstructureTable } from "@/components/HyperstructureTable";

# Hyperstructures

<img src="/images/covers/07.png" alt="Troops Moving Across Eternum" className="w-full rounded-lg my-6" />

<HyperstructureTable />

\n\n---\n\nfile: docs/pages/mechanics/world-structures/world-structures.mdx
meta: {}

# World Structures

## Quest Tiles

*Work in Progress*

## Fragment Mines

*Work in Progress*

## Hyperstructures

*Work in Progress*

